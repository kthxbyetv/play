
minitvbgone14.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000f14  00000fa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  00000faa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000081  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00001710  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001620  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002ab  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000387  00000000  00000000  00003093  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  0000341c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b35  00000000  00000000  000034dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000464  00000000  00000000  00004011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00004475  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	27 c6       	rjmp	.+3150   	; 0xc50 <__ctors_end>
   2:	80 c6       	rjmp	.+3328   	; 0xd04 <__vector_1>
   4:	40 c6       	rjmp	.+3200   	; 0xc86 <__bad_interrupt>
   6:	3f c6       	rjmp	.+3198   	; 0xc86 <__bad_interrupt>
   8:	3e c6       	rjmp	.+3196   	; 0xc86 <__bad_interrupt>
   a:	3d c6       	rjmp	.+3194   	; 0xc86 <__bad_interrupt>
   c:	3c c6       	rjmp	.+3192   	; 0xc86 <__bad_interrupt>
   e:	3b c6       	rjmp	.+3190   	; 0xc86 <__bad_interrupt>
  10:	3a c6       	rjmp	.+3188   	; 0xc86 <__bad_interrupt>
  12:	39 c6       	rjmp	.+3186   	; 0xc86 <__bad_interrupt>
  14:	38 c6       	rjmp	.+3184   	; 0xc86 <__bad_interrupt>
  16:	37 c6       	rjmp	.+3182   	; 0xc86 <__bad_interrupt>
  18:	36 c6       	rjmp	.+3180   	; 0xc86 <__bad_interrupt>
  1a:	35 c6       	rjmp	.+3178   	; 0xc86 <__bad_interrupt>
  1c:	34 c6       	rjmp	.+3176   	; 0xc86 <__bad_interrupt>

0000001e <EUpowerCodes>:
  1e:	f6 0b d8 06 a8 06 32 0c 14 0c 7b 06 5f 06 d8 06     ......2...{._...
  2e:	b1 0a 32 0c 20 06 ef 05 bc 05 9a 05 86 05 d9 09     ..2. ...........
  3e:	fb 09 d8 0b b6 0b 94 0b 7f 0b 45 0b 33 0b 09 0b     ..........E.3...
  4e:	eb 0a cd 0a 72 05 5a 05 2f 05 22 07 e3 04 c5 04     ....r.Z./.".....
  5e:	aa 04 96 04 6e 04 50 04 3c 04 28 04 f6 06 14 04     ....n.P.<.(.....
  6e:	e7 03 d0 03 bc 03 8f 03 58 03 44 03 22 03 06 03     ........X.D."...
  7e:	ed 02 d9 02 c5 02 ae 02 9a 02 7f 02 52 02 2e 02     ............R...
  8e:	1a 02 0c 02 f8 01 e0 01 c7 01 b1 01 9d 01 71 01     ..............q.
  9e:	46 01 19 01 fe 00 f5 00 d2 00 be 00 ac 00           F.............

000000ac <code_eu059Code>:
  ac:	5f 04 02 b2 00 26                                   _....&

000000b2 <code_eu059Times>:
  b2:	36 01 65 02 36 01 66 02 6e 02 78 20                 6.e.6.f.n.x 

000000be <code_eu058Code>:
  be:	67 26 03 35 09 80 00 00 24 10 49 00 82 00 04 10     g&.5....$.I.....
  ce:	49 2a ba 00                                         I*..

000000d2 <code_eu054Code>:
  d2:	7f 0e 03 dd 00 40 1a 23 00 d0 80                    .....@.#...

000000dd <code_eu054Times>:
  dd:	31 00 35 00 31 00 68 00 31 00 06 01 31 00 08 01     1.5.1.h.1...1...
  ed:	31 00 5e 1f 64 00 67 00                             1.^.d.g.

000000f5 <code_eu053Code>:
  f5:	73 10 02 d0 01 26 ab 66 aa                          s....&.f.

000000fe <code_eu052Code>:
  fe:	7f 18 02 09 01 1a 9a 9b 9a 9a 99                    ...........

00000109 <code_eu052Times>:
 109:	10 00 46 03 11 00 2e 02 11 00 47 03 11 00 b8 18     ..F.......G.....

00000119 <code_eu051Code>:
 119:	67 34 03 32 01 60 82 00 20 80 41 04 90 41 2a 02     g4.2.`.. .A..A*.
 129:	08 00 82 01 04 12 41 04 80                          ......A..

00000132 <code_eu051Times>:
 132:	54 00 58 00 54 00 05 01 54 00 20 0d 5b 01 5b 01     T.X.T...T. .[.[.
 142:	5b 01 5c 01                                         [.\.

00000146 <code_eu050Code>:
 146:	77 30 03 5d 01 60 00 00 00 12 49 24 92 42 80 00     w0.].`....I$.B..
 156:	00 00 12 49 24 92 40                                ...I$.@

0000015d <code_eu050Times>:
 15d:	5b 00 58 00 5b 00 0b 01 5b 00 25 0e 69 01 66 01     [.X.[...[.%.i.f.
 16d:	69 01 67 01                                         i.g.

00000171 <code_eu049Code>:
 171:	67 28 03 85 01 80 92 00 00 92 00 00 10 40 04 82     g(...........@..
 181:	09 2a 97 48                                         .*.H

00000185 <code_eu049Times>:
 185:	37 00 37 00 37 00 a7 00 37 00 e1 11 37 00 22 25     7.7.7...7...7."%
 195:	c0 01 bd 01 c2 01 bc 01                             ........

0000019d <code_eu048Code>:
 19d:	67 26 03 35 09 80 00 00 24 82 49 04 80 40 00 12     g&.5....$.I..@..
 1ad:	09 2a ba 00                                         .*..

000001b1 <code_eu047Code>:
 1b1:	00 11 02 bb 01 41 24 12 41 00                       .....A$.A.

000001bb <code_eu047Times>:
 1bb:	03 00 f0 01 03 00 e9 02 03 00 d0 05                 ............

000001c7 <code_eu046Code>:
 1c7:	73 10 02 d0 01 16 ab 56 a9                          s......V.

000001d0 <code_eu046Times>:
 1d0:	0f 00 ed 01 10 00 ed 01 10 00 ba 02 10 00 86 05     ................

000001e0 <code_eu045Code>:
 1e0:	5f 0a 02 e8 01 16 e5 90                             _.......

000001e8 <code_eu045Times>:
 1e8:	98 00 d7 01 9a 00 9c 00 9a 00 d5 01 9a 00 83 0b     ................

000001f8 <code_eu044Code>:
 1f8:	67 26 03 0f 0a a0 02 01 04 90 48 20 00 00 04 92     g&........H ....
 208:	49 2b 3d 00                                         I+=.

0000020c <code_eu043Code>:
 20c:	5f 02 02 12 02 10                                   _.....

00000212 <code_eu043Times>:
 212:	0d 04 78 10 10 04 00 00                             ..x.....

0000021a <code_eu042Code>:
 21a:	67 26 03 35 09 80 00 00 24 92 09 00 82 00 04 10     g&.5....$.......
 22a:	49 2a ba 00                                         I*..

0000022e <code_eu041Code>:
 22e:	77 1c 03 3e 02 0c b2 ca 49 13 0b 2c b2 92 44 b0     w..>....I..,..D.

0000023e <code_eu041Times>:
 23e:	2e 00 2c 01 31 00 2a 01 31 00 88 02 31 00 e5 03     ..,.1.*.1...1...
 24e:	31 00 f0 0b                                         1...

00000252 <code_eu040Code>:
 252:	6f 34 03 6b 02 60 90 40 20 80 40 20 90 41 2a 02     o4.k.`.@ .@ .A*.
 262:	41 00 82 01 00 82 41 04 80                          A.....A..

0000026b <code_eu040Times>:
 26b:	55 00 59 00 55 00 08 01 55 00 4a 0d 5b 01 5e 01     U.Y.U...U.J.[.^.
 27b:	5c 01 5e 01                                         \.^.

0000027f <code_eu039Code>:
 27f:	63 18 02 8a 02 6a 82 83 aa 82 81                    c....j.....

0000028a <code_eu039Times>:
 28a:	0d 00 bd 01 0d 00 a2 02 0d 00 a3 02 0d 00 e7 11     ................

0000029a <code_eu038Code>:
 29a:	00 0b 02 a2 02 05 60 54                             ......`T

000002a2 <code_eu038Times>:
 2a2:	03 00 ea 03 03 00 d7 05 03 00 f3 0b                 ............

000002ae <code_eu037Code>:
 2ae:	67 18 02 b9 02 45 50 02 45 50 01                    g....EP.EP.

000002b9 <code_eu037Times>:
 2b9:	0e 00 eb 01 0e 00 e7 02 0e 00 3a 14                 ..........:.

000002c5 <code_eu036Code>:
 2c5:	67 26 03 0f 0a a4 00 49 00 92 00 20 02 00 04 90     g&.....I... ....
 2d5:	49 2b 3d 00                                         I+=.

000002d9 <code_eu034Code>:
 2d9:	67 26 03 0f 0a a0 02 40 04 90 09 20 02 00 04 90     g&.....@... ....
 2e9:	49 2b 3d 00                                         I+=.

000002ed <code_eu033Code>:
 2ed:	67 0e 02 f6 02 2a 5d a9 60                          g....*].`

000002f6 <code_eu033Times>:
 2f6:	30 00 96 00 32 00 95 00 32 00 5b 01 32 00 78 0b     0...2...2.[.2.x.

00000306 <code_eu032Code>:
 306:	77 1a 02 12 03 1a 56 a5 d6 95 a9 40                 w.....V....@

00000312 <code_eu032Times>:
 312:	31 00 cd 00 31 00 ce 00 31 00 c8 01 31 00 6a 0e     1...1...1...1.j.

00000322 <code_eu031Code>:
 322:	67 34 02 34 03 d5 50 15 11 65 54 05 44 59 55 01     g4.4..P..eT.DYU.
 332:	51 15                                               Q.

00000334 <code_eu031Times>:
 334:	35 00 35 00 35 00 a0 00 35 00 a1 06 46 03 a6 01     5.5.5...5...F...

00000344 <code_eu030Code>:
 344:	67 26 03 0f 0a a0 10 00 04 82 49 20 02 00 04 90     g&........I ....
 354:	49 2b 3d 00                                         I+=.

00000358 <code_eu029Code>:
 358:	73 2e 03 6f 03 47 00 00 00 00 04 64 62 00 e0 00     s..o.G.....db...
 368:	2b 23 10 07 00 00 80                                +#.....

0000036f <code_eu029Times>:
 36f:	32 00 32 00 32 00 63 00 32 00 fb 00 32 00 fc 00     2.2.2.c.2...2...
 37f:	32 00 a5 05 32 00 06 2b 66 00 31 00 66 00 62 00     2...2..+f.1.f.b.

0000038f <code_eu028Code>:
 38f:	83 1f 03 a0 03 04 92 49 26 34 72 24 9a d1 c8 92     .......I&4r$....
 39f:	48                                                  H

000003a0 <code_eu028Times>:
 3a0:	2f 00 0b 01 32 00 37 00 32 00 6e 00 32 00 09 01     /...2.7.2.n.2...
 3b0:	32 00 07 08 32 00 55 2f 64 00 39 00                 2...2.U/d.9.

000003bc <code_eu027Code>:
 3bc:	67 26 03 0f 0a a0 82 08 24 10 41 04 10 01 20 82     g&......$.A... .
 3cc:	48 0b 3d 00                                         H.=.

000003d0 <code_eu026Code>:
 3d0:	67 18 02 db 03 55 40 42 55 40 41                    g....U@BU@A

000003db <code_eu026Times>:
 3db:	0e 00 eb 01 0e 00 e7 02 0e 00 3e 13                 ..........>.

000003e7 <code_eu025Code>:
 3e7:	7f 15 03 f4 03 47 00 23 3c 01 59 e0 04              .....G.#<.Y..

000003f4 <code_eu025Times>:
 3f4:	31 00 34 00 31 00 66 00 31 00 fa 00 31 00 fc 00     1.4.1.f.1...1...
 404:	31 00 49 09 31 00 e9 2e 64 00 34 00 64 00 66 00     1.I.1...d.4.d.f.

00000414 <code_eu024Code>:
 414:	67 26 03 0f 0a a0 02 48 04 90 01 20 00 40 04 92     g&.....H... .@..
 424:	09 2b 3d 00                                         .+=.

00000428 <code_eu022Code>:
 428:	67 26 03 0f 0a a4 80 41 00 12 08 24 90 40 00 02     g&.....A...$.@..
 438:	09 2b 3d 00                                         .+=.

0000043c <code_eu021Code>:
 43c:	67 26 03 35 09 84 80 00 20 82 49 00 02 00 04 90     g&.5.... .I.....
 44c:	49 2a ba 40                                         I*.@

00000450 <code_eu020Code>:
 450:	6f 22 02 5e 04 22 20 00 01 c8 88 00 00 40           o".^." ......@

0000045e <code_eu020Times>:
 45e:	30 00 2d 01 30 00 8b 02 30 00 e9 03 30 00 b9 0b     0.-.0...0...0...

0000046e <code_eu019Code>:
 46e:	67 26 03 82 04 80 80 00 08 12 40 01 c0 40 00 04     g&........@..@..
 47e:	09 20 00 00                                         . ..

00000482 <code_eu019Times>:
 482:	32 00 36 00 32 00 9e 00 32 00 a2 01 32 00 8b 09     2.6.2...2...2...
 492:	4b 03 a2 01                                         K...

00000496 <code_eu018Code>:
 496:	67 26 03 0f 0a a0 02 48 04 90 01 20 12 40 04 80     g&.....H... .@..
 4a6:	09 2b 3d 00                                         .+=.

000004aa <code_eu017Code>:
 4aa:	77 18 02 b5 04 1a 9a 9b 9a 9a 99                    w..........

000004b5 <code_eu017Times>:
 4b5:	0f 00 4c 03 10 00 2d 02 10 00 4c 03 10 00 68 14     ..L...-...L...h.

000004c5 <code_eu016Code>:
 4c5:	77 22 02 d3 04 68 08 20 00 ea 02 08 00 10           w"...h. ......

000004d3 <code_eu016Times>:
 4d3:	1c 00 5c 00 1c 00 d5 00 1c 00 d6 00 1c 00 d3 0a     ..\.............

000004e3 <code_eu015Code>:
 4e3:	67 88 03 1b 05 60 82 08 24 10 41 00 12 40 04 80     g....`..$.A..@..
 4f3:	09 2a 02 08 20 90 41 04 00 49 00 12 00 24 a8 08     .*.. .A..I...$..
 503:	20 82 41 04 10 01 24 00 48 00 92 a0 20 82 09 04      .A...$.H... ...
 513:	10 40 04 90 01 20 02 48                             .@... .H

0000051b <code_eu015Times>:
 51b:	35 00 36 00 35 00 9c 00 35 00 ee 09 53 03 a9 01     5.6.5...5...S...
 52b:	55 03 a8 01                                         U...

0000052f <code_eu013Code>:
 52f:	67 58 02 4a 05 d4 55 00 00 40 15 54 00 01 55 56     gX.J..U..@.T..UV
 53f:	d4 55 00 00 40 15 54 00 01 55 55                    .U..@.T..UU

0000054a <code_eu013Times>:
 54a:	35 00 3b 00 35 00 ab 00 35 00 fe 08 7f 03 c1 01     5.;.5...5.......

0000055a <code_eu012Code>:
 55a:	77 1a 02 66 05 05 01 51 81 40 54 40                 w..f...Q.@T@

00000566 <code_eu012Times>:
 566:	2e 00 ce 00 2e 00 cb 01 2e 00 77 0d                 ..........w.

00000572 <code_eu011Code>:
 572:	67 26 03 35 09 84 00 48 04 02 01 04 80 09 00 12     g&.5...H........
 582:	40 2a ba 40                                         @*.@

00000586 <code_eu008Code>:
 586:	67 26 03 0f 0a a0 00 41 04 92 08 24 90 40 00 02     g&.....A...$.@..
 596:	09 2b 3d 00                                         .+=.

0000059a <code_eu007Code>:
 59a:	67 34 02 ac 05 d4 00 15 10 25 00 05 44 09 40 01     g4.......%..D.@.
 5aa:	51 01                                               Q.

000005ac <code_eu007Times>:
 5ac:	32 00 36 00 32 00 9f 00 32 00 03 09 46 03 a6 01     2.6.2...2...F...

000005bc <code_eu006Code>:
 5bc:	67 44 03 db 05 84 90 00 04 90 00 00 80 00 04 12     gD..............
 5cc:	49 2a 12 40 00 12 40 00 02 00 00 10 49 24 b0        I*.@..@.....I$.

000005db <code_eu006Times>:
 5db:	35 00 3f 00 35 00 ac 00 35 00 78 11 36 00 00 00     5.?.5...5.x.6...
 5eb:	c7 01 d4 01                                         ....

000005ef <code_eu005Code>:
 5ef:	67 40 03 0c 06 04 92 52 28 92 8c 44 92 89 45 24     g@.....R(..D..E$
 5ff:	53 44 92 52 28 92 8c 44 92 89 45 24 51              SD.R(..D..E$Q

0000060c <code_eu005Times>:
 60c:	18 00 be 00 19 00 50 00 19 00 be 00 19 00 67 10     ......P.......g.
 61c:	19 00 bf 12                                         ....

00000620 <code_eu004Code>:
 620:	6b 64 03 4b 06 60 80 00 00 00 08 00 00 00 20 00     kd.K.`........ .
 630:	00 04 12 48 04 12 48 2a 02 00 00 00 00 20 00 00     ...H..H*..... ..
 640:	00 80 00 00 10 49 20 10 49 20 80                    .....I .I .

0000064b <code_eu004Times>:
 64b:	2c 00 2d 00 2c 00 83 00 2c 00 26 1d 5a 01 b0 00     ,.-.,...,.&.Z...
 65b:	5a 01 b2 00                                         Z...

0000065f <code_eu002Code>:
 65f:	77 1a 02 6b 06 1a 56 a6 d6 95 a9 90                 w..k..V.....

0000066b <code_eu002Times>:
 66b:	2b 00 ce 00 2e 00 cc 00 2e 00 c8 01 2e 00 a0 0d     +...............

0000067b <code_eu001Code>:
 67b:	83 1f 03 8c 06 04 92 49 26 35 89 24 9a d6 24 92     .......I&5.$..$.
 68b:	48                                                  H

0000068c <code_eu001Times>:
 68c:	2f 00 09 01 33 00 36 00 33 00 6c 00 33 00 07 01     /...3.6.3.l.3...
 69c:	33 00 05 08 33 00 7f 2d 64 00 6d 00                 3...3..-d.m.

000006a8 <code_eu000Code>:
 6a8:	6f 28 03 bc 06 a4 08 00 00 00 00 64 2c 40 80 00     o(.........d,@..
 6b8:	00 00 06 41                                         ...A

000006bc <code_eu000Times>:
 6bc:	2b 00 2f 00 2b 00 5b 00 2b 00 84 20 58 00 2f 00     +./.+.[.+.. X./.
 6cc:	85 00 85 00 08 01 5a 00 08 01 5b 00                 ......Z...[.

000006d8 <code_epsonCode>:
 6d8:	68 22 02 e6 06 16 aa 59 99 aa 9a 55 65 b0           h".....Y...Ue.

000006e6 <code_epsonTimes>:
 6e6:	86 03 bd 01 38 00 a8 00 38 00 34 00 38 00 d0 07     ....8...8.4.8...

000006f6 <code_na022Code>:
 6f6:	67 26 03 0a 07 80 02 40 00 02 40 00 00 01 24 92     g&.....@..@...$.
 706:	48 0a ba 00                                         H...

0000070a <code_na022Times>:
 70a:	35 00 3c 00 35 00 af 00 35 00 6f 11 35 00 ed 24     5.<.5...5.o.5..$
 71a:	7c 03 c2 01 7f 03 e1 00                             |.......

00000722 <code_na021Code>:
 722:	67 26 03 36 07 80 10 40 08 82 08 01 c0 08 20 04     g&.6...@...... .
 732:	41 04 00 00                                         A...

00000736 <code_na021Times>:
 736:	30 00 34 00 30 00 a0 00 30 00 90 01 30 00 1f 09     0.4.0...0...0...
 746:	1f 03 90 01                                         ....

0000074a <code_na020Code>:
 74a:	67 26 03 5e 07 a0 10 00 04 82 49 20 02 00 04 90     g&.^......I ....
 75a:	49 2b 3d 00                                         I+=.

0000075e <code_na020Times>:
 75e:	3c 00 37 00 3c 00 a3 00 3c 00 03 10 3c 00 e2 25     <.7.<...<...<..%
 76e:	3d 00 00 00 82 03 cd 01 84 03 e6 00                 =...........

0000077a <code_na019Code>:
 77a:	67 64 03 a5 07 60 10 40 04 80 09 00 00 00 00 10     gd...`.@........
 78a:	00 20 10 00 20 80 00 0a 00 41 00 12 00 24 00 00     . .. ....A...$..
 79a:	00 00 40 00 80 40 00 82 00 00 00                    ..@..@.....

000007a5 <code_na019Times>:
 7a5:	28 00 2a 00 28 00 7c 00 28 00 f9 11 45 01 a3 00     (.*.(.|.(...E...
 7b5:	46 01 a3 00                                         F...

000007b9 <code_na018Code>:
 7b9:	67 88 03 f1 07 60 82 08 24 10 41 00 12 40 04 80     g....`..$.A..@..
 7c9:	09 2a 02 08 20 90 41 04 00 49 00 12 00 24 a8 08     .*.. .A..I...$..
 7d9:	20 82 41 04 10 01 24 00 48 00 92 a0 20 82 09 04      .A...$.H... ...
 7e9:	10 40 04 90 01 20 02 48                             .@... .H

000007f1 <code_na018Times>:
 7f1:	33 00 37 00 33 00 a1 00 33 00 06 0a 51 03 ad 01     3.7.3...3...Q...
 801:	51 03 ae 01                                         Q...

00000805 <code_na017Code>:
 805:	63 26 03 19 08 a0 02 48 04 90 01 20 80 40 04 12     c&.....H... .@..
 815:	09 2a 38 00                                         .*8.

00000819 <code_na017Times>:
 819:	38 00 39 00 38 00 af 00 38 00 36 10 38 00 1b 25     8.9.8...8.6.8..%
 829:	82 03 e3 00 82 03 c1 01                             ........

00000831 <code_na016Code>:
 831:	73 22 02 3f 08 54 04 10 00 95 01 04 00 10           s".?.T........

0000083f <code_na016Times>:
 83f:	1c 00 5a 00 1c 00 d3 00 1c 00 cb 09                 ..Z.........

0000084b <code_na015Code>:
 84b:	67 26 03 0f 0a a0 80 01 04 12 48 24 00 00 00 92     g&........H$....
 85b:	49 2b 3d 00                                         I+=.

0000085f <code_na014Code>:
 85f:	67 26 03 0f 0a a0 00 09 04 92 40 24 80 00 00 12     g&........@$....
 86f:	49 2b 3d 00                                         I+=.

00000873 <code_na013Code>:
 873:	67 30 03 8a 08 80 12 40 04 00 09 00 12 41 24 82     g0.....@.....A$.
 883:	01 00 10 48 24 aa e8                                ...H$..

0000088a <code_na013Times>:
 88a:	35 00 37 00 35 00 a7 00 35 00 00 09 35 00 99 24     5.7.5...5...5..$
 89a:	7d 03 c0 01 7f 03 bf 01                             }.......

000008a2 <code_na012Code>:
 8a2:	67 34 03 bb 08 64 12 08 24 00 08 20 10 09 2a 10     g4...d..$.. ..*.
 8b2:	48 20 90 00 20 80 40 24 90                          H .. .@$.

000008bb <code_na012Times>:
 8bb:	51 00 57 00 51 00 fe 00 51 00 d0 0c 4b 01 50 01     Q.W.Q...Q...K.P.
 8cb:	4b 01 51 01                                         K.Q.

000008cf <code_na011Code>:
 8cf:	67 26 03 e3 08 a0 00 41 04 92 08 24 90 40 00 02     g&.....A...$.@..
 8df:	09 2b 3d 00                                         .+=.

000008e3 <code_na011Times>:
 8e3:	37 00 37 00 37 00 ac 00 37 00 c7 0f 37 00 84 24     7.7.7...7...7..$
 8f3:	38 00 00 00 74 03 ba 01 75 03 e1 00                 8...t...u...

000008ff <code_na010Code>:
 8ff:	67 34 02 11 09 d4 00 15 10 25 00 05 44 09 40 01     g4.......%..D.@.
 90f:	51 01                                               Q.

00000911 <code_na010Times>:
 911:	33 00 37 00 33 00 9e 00 33 00 ee 08 49 03 a3 01     3.7.3...3...I...

00000921 <code_na009Code>:
 921:	67 26 03 35 09 84 90 00 20 80 08 00 00 09 24 92     g&.5.... .....$.
 931:	40 0a ba 40                                         @..@

00000935 <code_na009Times>:
 935:	35 00 38 00 35 00 ab 00 35 00 6e 0f 35 00 7f 25     5.8.5...5.n.5..%
 945:	82 03 c3 01 84 03 e2 00                             ........

0000094d <code_na008Code>:
 94d:	67 44 03 6c 09 64 00 49 00 92 00 20 82 01 04 10     gD.l.d.I... ....
 95d:	48 2a 10 01 24 02 48 00 82 08 04 10 41 20 90        H*..$.H.....A .

0000096c <code_na008Times>:
 96c:	38 00 3a 00 38 00 aa 00 38 00 ab 0f 82 03 c2 01     8.:.8...8.......
 97c:	84 03 c1 01                                         ....

00000980 <code_na007Code>:
 980:	65 22 03 92 09 09 94 53 29 94 d9 85 32 8a 65 32     e".....S)...2.e2
 990:	9b 20                                               . 

00000992 <code_na007Times>:
 992:	31 00 31 00 31 00 32 00 31 00 9a 01 31 00 fe 01     1.1.1.2.1...1...
 9a2:	31 00 4b 2f                                         1.K/

000009a6 <code_na006Code>:
 9a6:	67 44 03 c5 09 64 90 00 04 90 00 00 80 00 04 12     gD...d..........
 9b6:	49 2a 12 40 00 12 40 00 02 00 00 10 49 24 90        I*.@..@.....I$.

000009c5 <code_na006Times>:
 9c5:	32 00 3e 00 32 00 ac 00 32 00 bd 11 c0 01 d2 01     2.>.2...2.......
 9d5:	c2 01 d1 01                                         ....

000009d9 <code_na005Code>:
 9d9:	6f 18 03 e7 09 10 92 49 46 33 09 24 94 60           o......IF3.$.`

000009e7 <code_na005Times>:
 9e7:	58 00 5a 00 58 00 5b 00 58 00 b5 00 58 00 10 23     X.Z.X.[.X...X..#
 9f7:	b1 00 5b 00                                         ..[.

000009fb <code_na004Code>:
 9fb:	67 26 03 0f 0a a0 00 01 04 92 48 20 80 40 04 12     g&........H .@..
 a0b:	09 2b 3d 00                                         .+=.

00000a0f <code_na004Times>:
 a0f:	37 00 39 00 37 00 aa 00 37 00 6d 0f 37 00 97 25     7.9.7...7.m.7..%
 a1f:	38 00 00 00 82 03 c5 01 84 03 e2 00                 8...........

00000a2b <code_na003Code>:
 a2b:	67 40 02 40 0a 15 5a 65 67 95 65 9a 9b 95 5a 65     g@.@..Zeg.e...Ze
 a3b:	67 95 65 9a 99                                      g.e..

00000a40 <code_na003Times>:
 a40:	1a 00 b9 00 1b 00 50 00 1b 00 b9 00 1b 00 c5 11     ......P.........

00000a50 <code_na002Code>:
 a50:	6b 64 03 7b 0a 60 80 00 00 00 08 00 00 00 20 00     kd.{.`........ .
 a60:	00 04 12 48 04 12 48 2a 02 00 00 00 00 20 00 00     ...H..H*..... ..
 a70:	00 80 00 00 10 49 20 10 49 20 80                    .....I .I .

00000a7b <code_na002Times>:
 a7b:	2a 00 2e 00 2a 00 85 00 2a 00 5f 1d 5b 01 b0 00     *...*...*._.[...
 a8b:	5b 01 b1 00                                         [...

00000a8f <code_na001Code>:
 a8f:	45 34 02 a1 0a d5 41 11 00 14 44 6d 54 11 10 01     E4....A...DmT...
 a9f:	44 45                                               DE

00000aa1 <code_na001Times>:
 aa1:	32 00 64 00 32 00 c8 00 32 00 20 03 90 01 90 01     2.d.2...2. .....

00000ab1 <code_na000Code>:
 ab1:	67 1a 02 bd 0a e2 20 80 78 88 20 10                 g..... .x. .

00000abd <code_na000Times>:
 abd:	3c 00 3c 00 3c 00 8c 0a 78 00 3c 00 f0 00 3c 00     <.<.<...x.<...<.

00000acd <code_RD427ECode>:
 acd:	67 23 02 db 0a 2a 5a 9a 65 69 9a 96 65 1f           g#...*Z.ei..e.

00000adb <code_RD427ETimes>:
 adb:	8c 03 ba 01 40 00 a0 00 40 00 2f 00 84 03 e1 00     ....@...@./.....

00000aeb <code_RC8861Code>:
 aeb:	67 22 02 f9 0a 19 9a 6b 66 69 ad 99 a6 0b           g".....kfi....

00000af9 <code_RC8861Times>:
 af9:	ed 00 3e 00 76 00 3d 00 3b 00 3d 00 3b 00 80 11     ..>.v.=.;.=.;...

00000b09 <code_N2QAYB000239Code>:
 b09:	67 ff 02 6f 0b 26 aa aa a6 aa aa 6a aa 99 56 99     g..o.&.....j..V.
 b19:	56 79 aa aa a9 aa aa 9a aa a6 55 a6 55 9e 6a aa     Vy........U.U.j.
 b29:	aa 6a aa a6 aa a9 95 69 95 67                       .j.....i.g

00000b33 <code_EUR7914Z20Code>:
 b33:	67 34 02 6f 0b 19 56 99 95 76 55 a6 65 5d 95 69     g4.o..V..vU.e].i
 b43:	99 57                                               .W

00000b45 <code_EUR7623X70Code>:
 b45:	67 ff 02 6f 0b 26 aa aa a6 aa a6 69 5a 99 56 9a     g..o.&.....iZ.V.
 b55:	aa 79 aa aa a9 aa a9 9a 56 a6 55 a6 aa 9e 6a aa     .y......V.U...j.
 b65:	aa 6a aa 66 95 a9 95 69 aa a7                       .j.f...i..

00000b6f <code_EUR7623X70Times>:
 b6f:	65 01 a6 00 36 00 79 00 36 00 25 00 36 00 10 1d     e...6.y.6.%.6...

00000b7f <code_S33Code>:
 b7f:	67 0d 02 88 0b 19 9a aa 10                          g........

00000b88 <code_S33Times>:
 b88:	f6 00 37 00 7c 00 38 00 40 00 38 00                 ..7.|.8.@.8.

00000b94 <code_V718UCode>:
 b94:	68 34 02 a6 0b 16 99 5a 59 b5 a6 56 96 6d 69 95     h4.....ZY..V.mi.
 ba4:	a5 9b                                               ..

00000ba6 <code_V718UTimes>:
 ba6:	48 03 a6 01 33 00 a0 00 33 00 36 00 33 00 94 07     H...3...3.6.3...

00000bb6 <code_SX263UCode>:
 bb6:	68 34 02 c8 0b 16 96 6a a9 b5 a5 9a aa 6d 69 66     h4.....j.....mif
 bc6:	aa 9b                                               ..

00000bc8 <code_SX263UTimes>:
 bc8:	47 03 a9 01 31 00 a1 00 31 00 39 00 31 00 d4 08     G...1...1.9.1...

00000bd8 <code_CAE33Code>:
 bd8:	68 23 02 e6 0b 5a 99 56 6a d6 a6 55 9a b0           h#...Z.Vj..U..

00000be6 <code_CAE33Times>:
 be6:	5c 03 96 01 42 00 91 00 42 00 28 00 42 00 34 08     \...B...B.(.B.4.

00000bf6 <code_MGZCode>:
 bf6:	46 21 02 04 0c 26 aa 95 aa aa aa 95 a5 c0           F!...&........

00000c04 <code_MGZTimes>:
 c04:	6e 00 1d 00 36 00 1d 00 1d 00 1d 00 36 00 00 00     n...6.......6...

00000c14 <code_TNT1Code>:
 c14:	68 22 02 22 0c 15 55 aa aa 69 55 56 aa b0           h"."..U..iUV..

00000c22 <code_TNT1Times>:
 c22:	80 03 c0 01 38 00 38 00 38 00 a8 00 38 00 00 00     ....8.8.8...8...

00000c32 <code_HitachiVPCode>:
 c32:	68 22 02 40 0c 15 aa 59 a9 95 9a aa 65 70           h".@...Y....ep

00000c40 <code_HitachiVPTimes>:
 c40:	84 03 cc 01 3f 00 ad 00 3f 00 3f 00 3f 00 00 00     ....?...?.?.?...

00000c50 <__ctors_end>:
 c50:	11 24       	eor	r1, r1
 c52:	1f be       	out	0x3f, r1	; 63
 c54:	cf e5       	ldi	r28, 0x5F	; 95
 c56:	d2 e0       	ldi	r29, 0x02	; 2
 c58:	de bf       	out	0x3e, r29	; 62
 c5a:	cd bf       	out	0x3d, r28	; 61

00000c5c <__do_copy_data>:
 c5c:	10 e0       	ldi	r17, 0x00	; 0
 c5e:	a0 e6       	ldi	r26, 0x60	; 96
 c60:	b0 e0       	ldi	r27, 0x00	; 0
 c62:	e4 e1       	ldi	r30, 0x14	; 20
 c64:	ff e0       	ldi	r31, 0x0F	; 15
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <__do_copy_data+0x10>
 c68:	05 90       	lpm	r0, Z+
 c6a:	0d 92       	st	X+, r0
 c6c:	a2 36       	cpi	r26, 0x62	; 98
 c6e:	b1 07       	cpc	r27, r17
 c70:	d9 f7       	brne	.-10     	; 0xc68 <__do_copy_data+0xc>

00000c72 <__do_clear_bss>:
 c72:	10 e0       	ldi	r17, 0x00	; 0
 c74:	a2 e6       	ldi	r26, 0x62	; 98
 c76:	b0 e0       	ldi	r27, 0x00	; 0
 c78:	01 c0       	rjmp	.+2      	; 0xc7c <.do_clear_bss_start>

00000c7a <.do_clear_bss_loop>:
 c7a:	1d 92       	st	X+, r1

00000c7c <.do_clear_bss_start>:
 c7c:	a7 36       	cpi	r26, 0x67	; 103
 c7e:	b1 07       	cpc	r27, r17
 c80:	e1 f7       	brne	.-8      	; 0xc7a <.do_clear_bss_loop>
 c82:	92 d0       	rcall	.+292    	; 0xda8 <main>
 c84:	45 c1       	rjmp	.+650    	; 0xf10 <_exit>

00000c86 <__bad_interrupt>:
 c86:	bc c9       	rjmp	.-3208   	; 0x0 <__vectors>

00000c88 <read_bits>:
uint8_t bits_r=0,grenade=0;
PGM_P code_ptr;

// we cant read more than 8 bits at a time so dont try!
uint8_t read_bits(uint8_t count)
{
 c88:	1f 93       	push	r17
 c8a:	cf 93       	push	r28
 c8c:	df 93       	push	r29
 c8e:	18 2f       	mov	r17, r24
 c90:	90 91 64 00 	lds	r25, 0x0064
 c94:	40 91 65 00 	lds	r20, 0x0065
 c98:	50 91 66 00 	lds	r21, 0x0066
 c9c:	e0 91 63 00 	lds	r30, 0x0063
  uint8_t i;
  uint8_t tmp=0;
  
  // we need to read back count bytes
  for (i=0; i<count; i++) {
 ca0:	60 e0       	ldi	r22, 0x00	; 0
 ca2:	70 e0       	ldi	r23, 0x00	; 0

// we cant read more than 8 bits at a time so dont try!
uint8_t read_bits(uint8_t count)
{
  uint8_t i;
  uint8_t tmp=0;
 ca4:	80 e0       	ldi	r24, 0x00	; 0
uint8_t bitsleft_r = 0;
uint8_t bits_r=0,grenade=0;
PGM_P code_ptr;

// we cant read more than 8 bits at a time so dont try!
uint8_t read_bits(uint8_t count)
 ca6:	a1 2f       	mov	r26, r17
 ca8:	b0 e0       	ldi	r27, 0x00	; 0
 caa:	11 97       	sbiw	r26, 0x01	; 1
{
  uint8_t i;
  uint8_t tmp=0;
  
  // we need to read back count bytes
  for (i=0; i<count; i++) {
 cac:	1d c0       	rjmp	.+58     	; 0xce8 <read_bits+0x60>
    // check if the 8-bit buffer we have has run out
    if (bitsleft_r == 0) {
 cae:	91 11       	cpse	r25, r1
 cb0:	05 c0       	rjmp	.+10     	; 0xcbc <read_bits+0x34>
      // in which case we read a new byte in
      bits_r = pgm_read_byte(code_ptr++);
 cb2:	fa 01       	movw	r30, r20
 cb4:	4f 5f       	subi	r20, 0xFF	; 255
 cb6:	5f 4f       	sbci	r21, 0xFF	; 255
 cb8:	e4 91       	lpm	r30, Z
      // and reset the buffer size (8 bites in a byte)
      bitsleft_r = 8;
 cba:	98 e0       	ldi	r25, 0x08	; 8
    }
    // remove one bit
    bitsleft_r--;
 cbc:	91 50       	subi	r25, 0x01	; 1
    // and shift it off of the end of 'bits_r'
    tmp |= (((bits_r >> (bitsleft_r)) & 1) << (count-1-i));
 cbe:	2e 2f       	mov	r18, r30
 cc0:	30 e0       	ldi	r19, 0x00	; 0
 cc2:	09 2e       	mov	r0, r25
 cc4:	02 c0       	rjmp	.+4      	; 0xcca <read_bits+0x42>
 cc6:	35 95       	asr	r19
 cc8:	27 95       	ror	r18
 cca:	0a 94       	dec	r0
 ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <read_bits+0x3e>
 cce:	21 70       	andi	r18, 0x01	; 1
 cd0:	33 27       	eor	r19, r19
uint8_t bitsleft_r = 0;
uint8_t bits_r=0,grenade=0;
PGM_P code_ptr;

// we cant read more than 8 bits at a time so dont try!
uint8_t read_bits(uint8_t count)
 cd2:	ed 01       	movw	r28, r26
 cd4:	c6 1b       	sub	r28, r22
 cd6:	d7 0b       	sbc	r29, r23
      bitsleft_r = 8;
    }
    // remove one bit
    bitsleft_r--;
    // and shift it off of the end of 'bits_r'
    tmp |= (((bits_r >> (bitsleft_r)) & 1) << (count-1-i));
 cd8:	0c 2e       	mov	r0, r28
 cda:	01 c0       	rjmp	.+2      	; 0xcde <read_bits+0x56>
 cdc:	22 0f       	add	r18, r18
 cde:	0a 94       	dec	r0
 ce0:	ea f7       	brpl	.-6      	; 0xcdc <read_bits+0x54>
 ce2:	82 2b       	or	r24, r18
 ce4:	6f 5f       	subi	r22, 0xFF	; 255
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
{
  uint8_t i;
  uint8_t tmp=0;
  
  // we need to read back count bytes
  for (i=0; i<count; i++) {
 ce8:	61 17       	cp	r22, r17
 cea:	08 f3       	brcs	.-62     	; 0xcae <read_bits+0x26>
 cec:	90 93 64 00 	sts	0x0064, r25
 cf0:	50 93 66 00 	sts	0x0066, r21
 cf4:	40 93 65 00 	sts	0x0065, r20
 cf8:	e0 93 63 00 	sts	0x0063, r30
    // and shift it off of the end of 'bits_r'
    tmp |= (((bits_r >> (bitsleft_r)) & 1) << (count-1-i));
  }
  // return the selected bits in the LSB part of tmp
  return tmp; 
}
 cfc:	df 91       	pop	r29
 cfe:	cf 91       	pop	r28
 d00:	1f 91       	pop	r17
 d02:	08 95       	ret

00000d04 <__vector_1>:

ISR(INT0_vect) {
 d04:	1f 92       	push	r1
 d06:	0f 92       	push	r0
 d08:	0f b6       	in	r0, 0x3f	; 63
 d0a:	0f 92       	push	r0
 d0c:	11 24       	eor	r1, r1
  wdt_enable(WDTO_15MS); // 1 second long timeout
 d0e:	28 e0       	ldi	r18, 0x08	; 8
 d10:	88 e1       	ldi	r24, 0x18	; 24
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	0f b6       	in	r0, 0x3f	; 63
 d16:	f8 94       	cli
 d18:	a8 95       	wdr
 d1a:	81 bd       	out	0x21, r24	; 33
 d1c:	0f be       	out	0x3f, r0	; 63
 d1e:	21 bd       	out	0x21, r18	; 33
 d20:	ff cf       	rjmp	.-2      	; 0xd20 <__vector_1+0x1c>

00000d22 <delay_ten_us>:
// it is 'hardcoded' and is calibrated by adjusting DELAY_CNT 
// in main.h Unless you are changing the crystal from 8mhz, dont
// mess with this.
void delay_ten_us(uint16_t us) {
  uint8_t timer;
  while (us != 0) {
 d22:	07 c0       	rjmp	.+14     	; 0xd32 <delay_ten_us+0x10>
 d24:	2c e0       	ldi	r18, 0x0C	; 12
    // for 8MHz we want to delay 80 cycles per 10 microseconds
    // this code is tweaked to give about that amount.
    for (timer=0; timer <= DELAY_CNT; timer++) {
      NOP;
 d26:	00 00       	nop
      NOP;
 d28:	00 00       	nop
 d2a:	21 50       	subi	r18, 0x01	; 1
void delay_ten_us(uint16_t us) {
  uint8_t timer;
  while (us != 0) {
    // for 8MHz we want to delay 80 cycles per 10 microseconds
    // this code is tweaked to give about that amount.
    for (timer=0; timer <= DELAY_CNT; timer++) {
 d2c:	e1 f7       	brne	.-8      	; 0xd26 <delay_ten_us+0x4>
      NOP;
      NOP;
    }
    NOP;
 d2e:	00 00       	nop
    us--;
 d30:	01 97       	sbiw	r24, 0x01	; 1
// it is 'hardcoded' and is calibrated by adjusting DELAY_CNT 
// in main.h Unless you are changing the crystal from 8mhz, dont
// mess with this.
void delay_ten_us(uint16_t us) {
  uint8_t timer;
  while (us != 0) {
 d32:	00 97       	sbiw	r24, 0x00	; 0
 d34:	b9 f7       	brne	.-18     	; 0xd24 <delay_ten_us+0x2>
      NOP;
    }
    NOP;
    us--;
  }
}
 d36:	08 95       	ret

00000d38 <xmitCodeElement>:

extern const PGM_P * const EUpowerCodes[] PROGMEM;
extern const uint8_t num_NAcodes, num_EUcodes;

void xmitCodeElement(uint16_t ontime, uint16_t offtime, uint8_t PWM_code )
{
 d38:	cf 93       	push	r28
 d3a:	df 93       	push	r29
 d3c:	eb 01       	movw	r28, r22
  TCNT0 = 0; // reset the timers so they are aligned
 d3e:	12 be       	out	0x32, r1	; 50
  TIFR = 0;  // clean out the timer flags
 d40:	18 be       	out	0x38, r1	; 56

  if(PWM_code) {
 d42:	44 23       	and	r20, r20
 d44:	29 f0       	breq	.+10     	; 0xd50 <xmitCodeElement+0x18>
    TCCR0A =_BV(COM0A0) | _BV(WGM01);          // Set up timer 0
 d46:	22 e4       	ldi	r18, 0x42	; 66
 d48:	2a bd       	out	0x2a, r18	; 42
    TCCR0B = _BV(CS00);
 d4a:	21 e0       	ldi	r18, 0x01	; 1
 d4c:	23 bf       	out	0x33, r18	; 51
 d4e:	01 c0       	rjmp	.+2      	; 0xd52 <xmitCodeElement+0x1a>
  } else {
    PORTB |= _BV(IRLED);
 d50:	c0 9a       	sbi	0x18, 0	; 24
  }

  delay_ten_us(ontime);
 d52:	e7 df       	rcall	.-50     	; 0xd22 <delay_ten_us>

  TCCR0A = 0;
 d54:	1a bc       	out	0x2a, r1	; 42
  TCCR0B = 0;
 d56:	13 be       	out	0x33, r1	; 51
  PORTB &= ~_BV(IRLED);           // turn off IR LED 2N2222
 d58:	c0 98       	cbi	0x18, 0	; 24
  //PORTB |= _BV(IRLED); 

  delay_ten_us(offtime);
 d5a:	ce 01       	movw	r24, r28
}
 d5c:	df 91       	pop	r29
 d5e:	cf 91       	pop	r28
  TCCR0A = 0;
  TCCR0B = 0;
  PORTB &= ~_BV(IRLED);           // turn off IR LED 2N2222
  //PORTB |= _BV(IRLED); 

  delay_ten_us(offtime);
 d60:	e0 cf       	rjmp	.-64     	; 0xd22 <delay_ten_us>

00000d62 <quickflashLEDx>:
  }
}

// This function just flashes the visible LED a couple times, used to
// tell the user what region is selected
void quickflashLEDx( uint8_t x ) {
 d62:	cf 93       	push	r28
 d64:	c8 2f       	mov	r28, r24
  while(x--) {
 d66:	0a c0       	rjmp	.+20     	; 0xd7c <quickflashLEDx+0x1a>
	delay_ten_us(15000);     // 150 millisec delay between flahes
 d68:	88 e9       	ldi	r24, 0x98	; 152
 d6a:	9a e3       	ldi	r25, 0x3A	; 58
 d6c:	da df       	rcall	.-76     	; 0xd22 <delay_ten_us>
  PORTB |= _BV(LED);   // turn on visible LED at PB0 by pulling pin to ground
 d6e:	c3 9a       	sbi	0x18, 3	; 24
  delay_ten_us(1000);   // 30 millisec delay
 d70:	88 ee       	ldi	r24, 0xE8	; 232
 d72:	93 e0       	ldi	r25, 0x03	; 3
 d74:	d6 df       	rcall	.-84     	; 0xd22 <delay_ten_us>
  PORTB &=~ _BV(LED);    // turn off visible LED at PB0 by pulling pin to +3V
 d76:	c3 98       	cbi	0x18, 3	; 24
  	wdt_reset();
 d78:	a8 95       	wdr
 d7a:	c1 50       	subi	r28, 0x01	; 1
}

// This function just flashes the visible LED a couple times, used to
// tell the user what region is selected
void quickflashLEDx( uint8_t x ) {
  while(x--) {
 d7c:	c1 11       	cpse	r28, r1
 d7e:	f4 cf       	rjmp	.-24     	; 0xd68 <quickflashLEDx+0x6>
  delay_ten_us(1000);   // 30 millisec delay
  PORTB &=~ _BV(LED);    // turn off visible LED at PB0 by pulling pin to +3V
  	wdt_reset();
  }
  //wdt_reset();                // kick the dog
}
 d80:	cf 91       	pop	r28
 d82:	08 95       	ret

00000d84 <setgrenade>:
ISR(INT0_vect) {
  wdt_enable(WDTO_15MS); // 1 second long timeout
	  for(;;) {} // Watchdog lol
}

void setgrenade(void) {
 d84:	cf 93       	push	r28
	uint8_t i;
  	grenade=9;
 d86:	89 e0       	ldi	r24, 0x09	; 9
 d88:	80 93 62 00 	sts	0x0062, r24
	quickflashLEDx(5);
 d8c:	85 e0       	ldi	r24, 0x05	; 5
 d8e:	e9 df       	rcall	.-46     	; 0xd62 <quickflashLEDx>
  GIMSK = _BV(INT0);
 d90:	80 e4       	ldi	r24, 0x40	; 64
 d92:	8b bf       	out	0x3b, r24	; 59
	  sei();
 d94:	78 94       	sei
 d96:	cf e0       	ldi	r28, 0x0F	; 15
			for (i=0;i<15;i++) {
			  delay_ten_us(65500); // 10s
 d98:	8c ed       	ldi	r24, 0xDC	; 220
 d9a:	9f ef       	ldi	r25, 0xFF	; 255
 d9c:	c2 df       	rcall	.-124    	; 0xd22 <delay_ten_us>
			  wdt_reset();
 d9e:	a8 95       	wdr
 da0:	c1 50       	subi	r28, 0x01	; 1
	uint8_t i;
  	grenade=9;
	quickflashLEDx(5);
  GIMSK = _BV(INT0);
	  sei();
			for (i=0;i<15;i++) {
 da2:	d1 f7       	brne	.-12     	; 0xd98 <setgrenade+0x14>
			  delay_ten_us(65500); // 10s
			  wdt_reset();
		    }
}
 da4:	cf 91       	pop	r28
 da6:	08 95       	ret

00000da8 <main>:

  //TCCR1 = 0;		   	   // Turn off PWM/freq gen, should be off already
  //TCCR0A = 0;
  //TCCR0B = 0;

  MCUSR = 0;                     // clear watchdog flag
 da8:	14 be       	out	0x34, r1	; 52
  WDTCR = _BV(WDCE) | _BV(WDE);  // enable WDT disable
 daa:	88 e1       	ldi	r24, 0x18	; 24
 dac:	81 bd       	out	0x21, r24	; 33

  WDTCR = 0;                     // disable WDT while we setup
 dae:	11 bc       	out	0x21, r1	; 33

  //GIMSK = 0;

  DDRB = _BV(LED) | _BV(IRLED);  // set the visible and IR LED pins to outputs
 db0:	89 e0       	ldi	r24, 0x09	; 9
 db2:	87 bb       	out	0x17, r24	; 23
  PORTB = 0b00000110;			 // Pullup
 db4:	86 e0       	ldi	r24, 0x06	; 6
 db6:	88 bb       	out	0x18, r24	; 24

  delay_ten_us(6000);
 db8:	80 e7       	ldi	r24, 0x70	; 112
 dba:	97 e1       	ldi	r25, 0x17	; 23
 dbc:	b2 df       	rcall	.-156    	; 0xd22 <delay_ten_us>

  if (!bit_is_set(PINB,GRENADE)) setgrenade();
 dbe:	b1 9b       	sbis	0x16, 1	; 22
 dc0:	e1 df       	rcall	.-62     	; 0xd84 <setgrenade>

  while(!bit_is_set(PINB,PB2)) {};
 dc2:	b2 9b       	sbis	0x16, 2	; 22
 dc4:	fe cf       	rjmp	.-4      	; 0xdc2 <main+0x1a>
	delay_ten_us(6000);
 dc6:	80 e7       	ldi	r24, 0x70	; 112
 dc8:	97 e1       	ldi	r25, 0x17	; 23
 dca:	ab df       	rcall	.-170    	; 0xd22 <delay_ten_us>
 dcc:	cf ef       	ldi	r28, 0xFF	; 255

  for (i=0;i<255;i++) {
	delay_ten_us(300);
 dce:	8c e2       	ldi	r24, 0x2C	; 44
 dd0:	91 e0       	ldi	r25, 0x01	; 1
 dd2:	a7 df       	rcall	.-178    	; 0xd22 <delay_ten_us>
	if (!bit_is_set(PINB,PB2)) {
 dd4:	b2 99       	sbic	0x16, 2	; 22
 dd6:	02 c0       	rjmp	.+4      	; 0xddc <main+0x34>
		setgrenade();
 dd8:	d5 df       	rcall	.-86     	; 0xd84 <setgrenade>
		break;
 dda:	02 c0       	rjmp	.+4      	; 0xde0 <main+0x38>
 ddc:	c1 50       	subi	r28, 0x01	; 1
  if (!bit_is_set(PINB,GRENADE)) setgrenade();

  while(!bit_is_set(PINB,PB2)) {};
	delay_ten_us(6000);

  for (i=0;i<255;i++) {
 dde:	b9 f7       	brne	.-18     	; 0xdce <main+0x26>
		setgrenade();
		break;
	}
  }

  GIMSK = _BV(INT0);
 de0:	80 e4       	ldi	r24, 0x40	; 64
 de2:	8b bf       	out	0x3b, r24	; 59
  //delay_ten_us(5000);            // Let everything settle for a bit
  
  
  // turn on watchdog timer immediately, this protects against
  // a 'stuck' system by resetting it
  wdt_enable(WDTO_8S); // 1 second long timeout
 de4:	29 e2       	ldi	r18, 0x29	; 41
 de6:	88 e1       	ldi	r24, 0x18	; 24
 de8:	90 e0       	ldi	r25, 0x00	; 0
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	f8 94       	cli
 dee:	a8 95       	wdr
 df0:	81 bd       	out	0x21, r24	; 33
 df2:	0f be       	out	0x3f, r0	; 63
 df4:	21 bd       	out	0x21, r18	; 33

	  sei();
 df6:	78 94       	sei

for (;;) {

	for(loopgrn=0;loopgrn<grenade+1;loopgrn++) {
 df8:	f1 2c       	mov	r15, r1
      j = num_EUcodes;
 dfa:	c0 90 60 00 	lds	r12, 0x0060
      
	      // visible indication that a code has been output.
	      if (!grenade) quickflashLEDx(1); 
		}
	    if (grenade) {
			PORTB = 0b00000110;	// Pullup
 dfe:	86 e0       	ldi	r24, 0x06	; 6
 e00:	b8 2e       	mov	r11, r24

	  sei();

for (;;) {

	for(loopgrn=0;loopgrn<grenade+1;loopgrn++) {
 e02:	5d c0       	rjmp	.+186    	; 0xebe <main+0x116>
      j = num_EUcodes;

	  if (grenade) quickflashLEDx(5);
 e04:	44 23       	and	r20, r20
 e06:	11 f0       	breq	.+4      	; 0xe0c <main+0x64>
 e08:	85 e0       	ldi	r24, 0x05	; 5
 e0a:	ab df       	rcall	.-170    	; 0xd62 <quickflashLEDx>
 e0c:	0e e1       	ldi	r16, 0x1E	; 30
 e0e:	10 e0       	ldi	r17, 0x00	; 0
	      // The address is 16-bits (2 byte, 1 word)
	      const PGM_P time_ptr = (PGM_P)pgm_read_word(code_ptr);
	      code_ptr+=2;

	      // For EACH pair in this code....
	      for (uint8_t k=0; k<numpairs; k++) {
 e10:	e1 2c       	mov	r14, r1
 e12:	44 c0       	rjmp	.+136    	; 0xe9c <main+0xf4>

    // for every POWER code in our collection
	    for(i=0 ; i < j; i++) {   

	      //To keep Watchdog from resetting in middle of code.
	      wdt_reset();
 e14:	a8 95       	wdr

		  code_ptr = (PGM_P)pgm_read_word(EUpowerCodes+i);
 e16:	f8 01       	movw	r30, r16
 e18:	25 91       	lpm	r18, Z+
 e1a:	34 91       	lpm	r19, Z

	      // Read the carrier frequency from the first byte of code structure
	      const uint8_t freq = pgm_read_byte(code_ptr++);
 e1c:	c9 01       	movw	r24, r18
 e1e:	01 96       	adiw	r24, 0x01	; 1
 e20:	f9 01       	movw	r30, r18
 e22:	d4 90       	lpm	r13, Z
	      // set OCR for Timer1 to output this POWER code's carrier frequency
	      OCR0A = freq; 
 e24:	d9 bc       	out	0x29, r13	; 41
      
	      // Get the number of pairs, the second byte from the code struct
	      const uint8_t numpairs = pgm_read_byte(code_ptr++);
 e26:	fc 01       	movw	r30, r24
 e28:	a4 90       	lpm	r10, Z
 e2a:	31 96       	adiw	r30, 0x01	; 1

	      // Get the number of bits we use to index into the timer table
	      // This is the third byte of the structure
	      const uint8_t bitcompression = pgm_read_byte(code_ptr++);
 e2c:	94 90       	lpm	r9, Z
 e2e:	f9 01       	movw	r30, r18
 e30:	33 96       	adiw	r30, 0x03	; 3

	      // Get pointer (address in memory) to pulse-times table
	      // The address is 16-bits (2 byte, 1 word)
	      const PGM_P time_ptr = (PGM_P)pgm_read_word(code_ptr);
 e32:	85 91       	lpm	r24, Z+
 e34:	94 91       	lpm	r25, Z
 e36:	c8 2f       	mov	r28, r24
 e38:	d9 2f       	mov	r29, r25
	      code_ptr+=2;
 e3a:	2b 5f       	subi	r18, 0xFB	; 251
 e3c:	3f 4f       	sbci	r19, 0xFF	; 255
 e3e:	30 93 66 00 	sts	0x0066, r19
 e42:	20 93 65 00 	sts	0x0065, r18

	      // For EACH pair in this code....
	      for (uint8_t k=0; k<numpairs; k++) {
 e46:	81 2c       	mov	r8, r1
 e48:	19 c0       	rjmp	.+50     	; 0xe7c <main+0xd4>
			uint8_t ti;
	
			// Read the next 'n' bits as indicated by the compression variable
			// The multiply by 4 because there are 2 timing numbers per pair
			// and each timing number is one word long, so 4 bytes total!
			ti = (read_bits(bitcompression)) * 4;
 e4a:	89 2d       	mov	r24, r9
 e4c:	1d df       	rcall	.-454    	; 0xc88 <read_bits>
 e4e:	88 0f       	add	r24, r24
 e50:	88 0f       	add	r24, r24

			// read the onTime and offTime from the program memory
			ontime = pgm_read_word(time_ptr+ti);  // read word 1 - ontime
 e52:	28 2f       	mov	r18, r24
 e54:	30 e0       	ldi	r19, 0x00	; 0
 e56:	fe 01       	movw	r30, r28
 e58:	e2 0f       	add	r30, r18
 e5a:	f3 1f       	adc	r31, r19
 e5c:	45 91       	lpm	r20, Z+
 e5e:	54 91       	lpm	r21, Z
 e60:	ca 01       	movw	r24, r20
			offtime = pgm_read_word(time_ptr+ti+2);  // read word 2 - offtime
 e62:	f9 01       	movw	r30, r18
 e64:	32 96       	adiw	r30, 0x02	; 2
 e66:	ec 0f       	add	r30, r28
 e68:	fd 1f       	adc	r31, r29
 e6a:	25 91       	lpm	r18, Z+
 e6c:	34 91       	lpm	r19, Z
 e6e:	b9 01       	movw	r22, r18

			// transmit this codeElement (ontime and offtime)
			xmitCodeElement(ontime, offtime, (freq!=0));  
 e70:	41 e0       	ldi	r20, 0x01	; 1
 e72:	d1 10       	cpse	r13, r1
 e74:	01 c0       	rjmp	.+2      	; 0xe78 <main+0xd0>
 e76:	40 e0       	ldi	r20, 0x00	; 0
 e78:	5f df       	rcall	.-322    	; 0xd38 <xmitCodeElement>
	      // The address is 16-bits (2 byte, 1 word)
	      const PGM_P time_ptr = (PGM_P)pgm_read_word(code_ptr);
	      code_ptr+=2;

	      // For EACH pair in this code....
	      for (uint8_t k=0; k<numpairs; k++) {
 e7a:	83 94       	inc	r8
 e7c:	8a 10       	cpse	r8, r10
 e7e:	e5 cf       	rjmp	.-54     	; 0xe4a <main+0xa2>
			xmitCodeElement(ontime, offtime, (freq!=0));  
	      } 
      
	      //Flush remaining bits, so that next code starts
	      //with a fresh set of 8 bits.
	      bitsleft_r=0;	
 e80:	10 92 64 00 	sts	0x0064, r1

	      // delay 250 milliseconds before transmitting next POWER code
	      delay_ten_us(25000);
 e84:	88 ea       	ldi	r24, 0xA8	; 168
 e86:	91 e6       	ldi	r25, 0x61	; 97
 e88:	4c df       	rcall	.-360    	; 0xd22 <delay_ten_us>
      
	      // visible indication that a code has been output.
	      if (!grenade) quickflashLEDx(1); 
 e8a:	80 91 62 00 	lds	r24, 0x0062
 e8e:	81 11       	cpse	r24, r1
 e90:	02 c0       	rjmp	.+4      	; 0xe96 <main+0xee>
 e92:	81 e0       	ldi	r24, 0x01	; 1
 e94:	66 df       	rcall	.-308    	; 0xd62 <quickflashLEDx>
      j = num_EUcodes;

	  if (grenade) quickflashLEDx(5);

    // for every POWER code in our collection
	    for(i=0 ; i < j; i++) {   
 e96:	e3 94       	inc	r14
 e98:	0e 5f       	subi	r16, 0xFE	; 254
 e9a:	1f 4f       	sbci	r17, 0xFF	; 255
 e9c:	ec 10       	cpse	r14, r12
 e9e:	ba cf       	rjmp	.-140    	; 0xe14 <main+0x6c>
	      delay_ten_us(25000);
      
	      // visible indication that a code has been output.
	      if (!grenade) quickflashLEDx(1); 
		}
	    if (grenade) {
 ea0:	80 91 62 00 	lds	r24, 0x0062
 ea4:	81 11       	cpse	r24, r1
 ea6:	02 c0       	rjmp	.+4      	; 0xeac <main+0x104>

	  sei();

for (;;) {

	for(loopgrn=0;loopgrn<grenade+1;loopgrn++) {
 ea8:	f3 94       	inc	r15
 eaa:	09 c0       	rjmp	.+18     	; 0xebe <main+0x116>
      
	      // visible indication that a code has been output.
	      if (!grenade) quickflashLEDx(1); 
		}
	    if (grenade) {
			PORTB = 0b00000110;	// Pullup
 eac:	b8 ba       	out	0x18, r11	; 24
 eae:	cc e2       	ldi	r28, 0x2C	; 44
			for (i=0;i<44;i++) {
			  delay_ten_us(65500); // 29s
 eb0:	8c ed       	ldi	r24, 0xDC	; 220
 eb2:	9f ef       	ldi	r25, 0xFF	; 255
 eb4:	36 df       	rcall	.-404    	; 0xd22 <delay_ten_us>
			  wdt_reset();
 eb6:	a8 95       	wdr
 eb8:	c1 50       	subi	r28, 0x01	; 1
	      // visible indication that a code has been output.
	      if (!grenade) quickflashLEDx(1); 
		}
	    if (grenade) {
			PORTB = 0b00000110;	// Pullup
			for (i=0;i<44;i++) {
 eba:	d1 f7       	brne	.-12     	; 0xeb0 <main+0x108>
 ebc:	f5 cf       	rjmp	.-22     	; 0xea8 <main+0x100>

	  sei();

for (;;) {

	for(loopgrn=0;loopgrn<grenade+1;loopgrn++) {
 ebe:	40 91 62 00 	lds	r20, 0x0062
 ec2:	24 2f       	mov	r18, r20
 ec4:	30 e0       	ldi	r19, 0x00	; 0
 ec6:	8f 2d       	mov	r24, r15
 ec8:	90 e0       	ldi	r25, 0x00	; 0
 eca:	28 17       	cp	r18, r24
 ecc:	39 07       	cpc	r19, r25
 ece:	0c f0       	brlt	.+2      	; 0xed2 <main+0x12a>
 ed0:	99 cf       	rjmp	.-206    	; 0xe04 <main+0x5c>
		    }
	  	}
  	  }  

	  // We are done, no need for a watchdog timer anymore
	  wdt_disable();
 ed2:	c8 e1       	ldi	r28, 0x18	; 24
 ed4:	0f b6       	in	r0, 0x3f	; 63
 ed6:	f8 94       	cli
 ed8:	c1 bd       	out	0x21, r28	; 33
 eda:	11 bc       	out	0x21, r1	; 33
 edc:	0f be       	out	0x3f, r0	; 63

	  // flash the visible LED on PB0  4 times to indicate that we're done
	  quickflashLEDx(10);
 ede:	8a e0       	ldi	r24, 0x0A	; 10
 ee0:	40 df       	rcall	.-384    	; 0xd62 <quickflashLEDx>

	  // Shut down everything and put the CPU to sleep
	  TCCR0A = 0;           // turn off frequency generator (should be off already)
 ee2:	1a bc       	out	0x2a, r1	; 42
	  //TCCR0B = 0;           // turn off frequency generator (should be off already)
	  PORTB = 0b00000100;	// Pullup
 ee4:	84 e0       	ldi	r24, 0x04	; 4
 ee6:	88 bb       	out	0x18, r24	; 24

	  wdt_disable();           // turn off the watchdog (since we want to sleep
 ee8:	0f b6       	in	r0, 0x3f	; 63
 eea:	f8 94       	cli
 eec:	c1 bd       	out	0x21, r28	; 33
 eee:	11 bc       	out	0x21, r1	; 33
 ef0:	0f be       	out	0x3f, r0	; 63
	  //delay_ten_us(1000);      // wait 10 millisec

	  GIMSK = _BV(INT0);
 ef2:	80 e4       	ldi	r24, 0x40	; 64
 ef4:	8b bf       	out	0x3b, r24	; 59
	  MCUCR = _BV(SM1) |  _BV(SE);    // power down mode,  SE enables Sleep Modes
 ef6:	80 e3       	ldi	r24, 0x30	; 48
 ef8:	85 bf       	out	0x35, r24	; 53
	  sleep_cpu();                    // put CPU into Power Down Sleep Mode
 efa:	88 95       	sleep

	  //quickflashLEDx(4);
  	  wdt_enable(WDTO_15MS); // 1 second long timeout
 efc:	28 e0       	ldi	r18, 0x08	; 8
 efe:	88 e1       	ldi	r24, 0x18	; 24
 f00:	90 e0       	ldi	r25, 0x00	; 0
 f02:	0f b6       	in	r0, 0x3f	; 63
 f04:	f8 94       	cli
 f06:	a8 95       	wdr
 f08:	81 bd       	out	0x21, r24	; 33
 f0a:	0f be       	out	0x3f, r0	; 63
 f0c:	21 bd       	out	0x21, r18	; 33
 f0e:	ff cf       	rjmp	.-2      	; 0xf0e <main+0x166>

00000f10 <_exit>:
 f10:	f8 94       	cli

00000f12 <__stop_program>:
 f12:	ff cf       	rjmp	.-2      	; 0xf12 <__stop_program>
