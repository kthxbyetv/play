   1               		.file	"minitvbgone12_v4.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	read_bits
  12               	read_bits:
  13               	.LFB2:
  14               		.file 1 "minitvbgone12_v4.c"
   1:minitvbgone12_v4.c **** /*
   2:minitvbgone12_v4.c **** µTVBG Firmware V0.8
   3:minitvbgone12_v4.c **** For use with ATtiny45v and v4 hardware
   4:minitvbgone12_v4.c **** (c) Mitch Altman + Limor Fried + Furrtek 2011
   5:minitvbgone12_v4.c **** With some code from Kevin Timmerman & Damien Good 7-Dec-07
   6:minitvbgone12_v4.c **** Distributed under Creative Commons 2.5 -- Attib & Share Alike
   7:minitvbgone12_v4.c **** */
   8:minitvbgone12_v4.c **** 
   9:minitvbgone12_v4.c **** #include <avr/io.h>             // this contains all the IO port definitions
  10:minitvbgone12_v4.c **** #include <avr/sleep.h>          // definitions for power-down modes
  11:minitvbgone12_v4.c **** #include <avr/pgmspace.h>       // definitions or keeping constants in program memory
  12:minitvbgone12_v4.c **** #include <avr/wdt.h>
  13:minitvbgone12_v4.c **** #include <avr/interrupt.h>
  14:minitvbgone12_v4.c **** #include "a_v4.h"
  15:minitvbgone12_v4.c **** #include "util.h"
  16:minitvbgone12_v4.c **** 
  17:minitvbgone12_v4.c **** extern const PGM_P * const EUpowerCodes[] PROGMEM;
  18:minitvbgone12_v4.c **** extern const uint8_t num_NAcodes, num_EUcodes;
  19:minitvbgone12_v4.c **** 
  20:minitvbgone12_v4.c **** void xmitCodeElement(uint16_t ontime, uint16_t offtime, uint8_t PWM_code )
  21:minitvbgone12_v4.c **** {
  22:minitvbgone12_v4.c ****   TCNT0 = 0; // reset the timers so they are aligned
  23:minitvbgone12_v4.c ****   TIFR = 0;  // clean out the timer flags
  24:minitvbgone12_v4.c **** 
  25:minitvbgone12_v4.c ****   if(PWM_code) {
  26:minitvbgone12_v4.c ****     TCCR0A =_BV(COM0A0) | _BV(WGM01);          // Set up timer 0
  27:minitvbgone12_v4.c ****     TCCR0B = _BV(CS00);
  28:minitvbgone12_v4.c ****   } else {
  29:minitvbgone12_v4.c ****     PORTB |= _BV(IRLED);
  30:minitvbgone12_v4.c ****   }
  31:minitvbgone12_v4.c **** 
  32:minitvbgone12_v4.c ****   delay_ten_us(ontime);
  33:minitvbgone12_v4.c **** 
  34:minitvbgone12_v4.c ****   TCCR0A = 0;
  35:minitvbgone12_v4.c ****   TCCR0B = 0;
  36:minitvbgone12_v4.c ****   PORTB &= ~_BV(IRLED);           // turn off IR LED 2N2222
  37:minitvbgone12_v4.c ****   //PORTB |= _BV(IRLED); 
  38:minitvbgone12_v4.c **** 
  39:minitvbgone12_v4.c ****   delay_ten_us(offtime);
  40:minitvbgone12_v4.c **** }
  41:minitvbgone12_v4.c **** 
  42:minitvbgone12_v4.c **** uint8_t bitsleft_r = 0;
  43:minitvbgone12_v4.c **** uint8_t bits_r=0,grenade=0;
  44:minitvbgone12_v4.c **** PGM_P code_ptr;
  45:minitvbgone12_v4.c **** 
  46:minitvbgone12_v4.c **** // we cant read more than 8 bits at a time so dont try!
  47:minitvbgone12_v4.c **** uint8_t read_bits(uint8_t count)
  48:minitvbgone12_v4.c **** {
  15               		.loc 1 48 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 1F93      		push r17
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 17, -2
  22 0002 CF93      		push r28
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 28, -3
  26 0004 DF93      		push r29
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 29, -4
  30               	/* prologue: function */
  31               	/* frame size = 0 */
  32               	/* stack size = 3 */
  33               	.L__stack_usage = 3
  34 0006 182F      		mov r17,r24
  35               	.LVL1:
  36 0008 9091 0000 		lds r25,bitsleft_r
  37 000c 4091 0000 		lds r20,code_ptr
  38 0010 5091 0000 		lds r21,code_ptr+1
  39 0014 E091 0000 		lds r30,bits_r
  49:minitvbgone12_v4.c ****   uint8_t i;
  50:minitvbgone12_v4.c ****   uint8_t tmp=0;
  51:minitvbgone12_v4.c ****   
  52:minitvbgone12_v4.c ****   // we need to read back count bytes
  53:minitvbgone12_v4.c ****   for (i=0; i<count; i++) {
  40               		.loc 1 53 0
  41 0018 60E0      		ldi r22,0
  42 001a 70E0      		ldi r23,0
  50:minitvbgone12_v4.c ****   uint8_t tmp=0;
  43               		.loc 1 50 0
  44 001c 80E0      		ldi r24,0
  45               	.LVL2:
  47:minitvbgone12_v4.c **** uint8_t read_bits(uint8_t count)
  46               		.loc 1 47 0
  47 001e A12F      		mov r26,r17
  48 0020 B0E0      		ldi r27,0
  49 0022 1197      		sbiw r26,1
  50               		.loc 1 53 0
  51 0024 00C0      		rjmp .L2
  52               	.LVL3:
  53               	.L4:
  54:minitvbgone12_v4.c ****     // check if the 8-bit buffer we have has run out
  55:minitvbgone12_v4.c ****     if (bitsleft_r == 0) {
  54               		.loc 1 55 0
  55 0026 9111      		cpse r25,__zero_reg__
  56 0028 00C0      		rjmp .L3
  57               	.LBB2:
  56:minitvbgone12_v4.c ****       // in which case we read a new byte in
  57:minitvbgone12_v4.c ****       bits_r = pgm_read_byte(code_ptr++);
  58               		.loc 1 57 0
  59 002a FA01      		movw r30,r20
  60               	.LVL4:
  61 002c 4F5F      		subi r20,-1
  62 002e 5F4F      		sbci r21,-1
  63               	.LVL5:
  64               	/* #APP */
  65               	 ;  57 "minitvbgone12_v4.c" 1
  66 0030 E491      		lpm r30, Z
  67               		
  68               	 ;  0 "" 2
  69               	.LVL6:
  58:minitvbgone12_v4.c ****       // and reset the buffer size (8 bites in a byte)
  59:minitvbgone12_v4.c ****       bitsleft_r = 8;
  70               		.loc 1 59 0
  71               	/* #NOAPP */
  72 0032 98E0      		ldi r25,lo8(8)
  73               	.LVL7:
  74               	.L3:
  75               	.LBE2:
  60:minitvbgone12_v4.c ****     }
  61:minitvbgone12_v4.c ****     // remove one bit
  62:minitvbgone12_v4.c ****     bitsleft_r--;
  76               		.loc 1 62 0
  77 0034 9150      		subi r25,lo8(-(-1))
  63:minitvbgone12_v4.c ****     // and shift it off of the end of 'bits_r'
  64:minitvbgone12_v4.c ****     tmp |= (((bits_r >> (bitsleft_r)) & 1) << (count-1-i));
  78               		.loc 1 64 0
  79 0036 2E2F      		mov r18,r30
  80 0038 30E0      		ldi r19,0
  81 003a 092E      		mov r0,r25
  82 003c 00C0      		rjmp 2f
  83               		1:
  84 003e 3595      		asr r19
  85 0040 2795      		ror r18
  86               		2:
  87 0042 0A94      		dec r0
  88 0044 02F4      		brpl 1b
  89 0046 2170      		andi r18,1
  90 0048 3327      		clr r19
  47:minitvbgone12_v4.c **** uint8_t read_bits(uint8_t count)
  91               		.loc 1 47 0
  92 004a ED01      		movw r28,r26
  93 004c C61B      		sub r28,r22
  94 004e D70B      		sbc r29,r23
  95               		.loc 1 64 0
  96 0050 0C2E      		mov r0,r28
  97 0052 00C0      		rjmp 2f
  98               		1:
  99 0054 220F      		lsl r18
 100               		2:
 101 0056 0A94      		dec r0
 102 0058 02F4      		brpl 1b
 103 005a 822B      		or r24,r18
 104               	.LVL8:
 105 005c 6F5F      		subi r22,-1
 106 005e 7F4F      		sbci r23,-1
 107               	.LVL9:
 108               	.L2:
  53:minitvbgone12_v4.c ****   for (i=0; i<count; i++) {
 109               		.loc 1 53 0 discriminator 1
 110 0060 6117      		cp r22,r17
 111 0062 00F0      		brlo .L4
 112 0064 9093 0000 		sts bitsleft_r,r25
 113 0068 5093 0000 		sts code_ptr+1,r21
 114 006c 4093 0000 		sts code_ptr,r20
 115 0070 E093 0000 		sts bits_r,r30
 116               	/* epilogue start */
  65:minitvbgone12_v4.c ****   }
  66:minitvbgone12_v4.c ****   // return the selected bits in the LSB part of tmp
  67:minitvbgone12_v4.c ****   return tmp; 
  68:minitvbgone12_v4.c **** }
 117               		.loc 1 68 0
 118 0074 DF91      		pop r29
 119 0076 CF91      		pop r28
 120 0078 1F91      		pop r17
 121               	.LVL10:
 122 007a 0895      		ret
 123               		.cfi_endproc
 124               	.LFE2:
 126               	.global	__vector_1
 128               	__vector_1:
 129               	.LFB3:
  69:minitvbgone12_v4.c **** 
  70:minitvbgone12_v4.c **** ISR(INT0_vect) {
 130               		.loc 1 70 0
 131               		.cfi_startproc
 132 007c 1F92      		push r1
 133               	.LCFI3:
 134               		.cfi_def_cfa_offset 3
 135               		.cfi_offset 1, -2
 136 007e 0F92      		push r0
 137               	.LCFI4:
 138               		.cfi_def_cfa_offset 4
 139               		.cfi_offset 0, -3
 140 0080 0FB6      		in r0,__SREG__
 141 0082 0F92      		push r0
 142 0084 1124      		clr __zero_reg__
 143               	/* prologue: Signal */
 144               	/* frame size = 0 */
 145               	/* stack size = 3 */
 146               	.L__stack_usage = 3
  71:minitvbgone12_v4.c ****   wdt_enable(WDTO_15MS); // 1 second long timeout
 147               		.loc 1 71 0
 148 0086 28E0      		ldi r18,lo8(8)
 149 0088 88E1      		ldi r24,lo8(24)
 150 008a 90E0      		ldi r25,0
 151               	/* #APP */
 152               	 ;  71 "minitvbgone12_v4.c" 1
 153 008c 0FB6      		in __tmp_reg__,__SREG__
 154 008e F894      		cli
 155 0090 A895      		wdr
 156 0092 81BD      		out 33,r24
 157 0094 0FBE      		out __SREG__,__tmp_reg__
 158 0096 21BD      		out 33,r18
 159               	 ;  0 "" 2
 160               	/* #NOAPP */
 161               	.L6:
 162 0098 00C0      		rjmp .L6
 163               		.cfi_endproc
 164               	.LFE3:
 166               	.global	delay_ten_us
 168               	delay_ten_us:
 169               	.LFB6:
  72:minitvbgone12_v4.c **** 	  for(;;) {} // Watchdog lol
  73:minitvbgone12_v4.c **** }
  74:minitvbgone12_v4.c **** 
  75:minitvbgone12_v4.c **** void setgrenade(void) {
  76:minitvbgone12_v4.c **** 	uint8_t i;
  77:minitvbgone12_v4.c ****   	grenade=9;
  78:minitvbgone12_v4.c **** 	quickflashLEDx(5);
  79:minitvbgone12_v4.c ****   GIMSK = _BV(INT0);
  80:minitvbgone12_v4.c **** 	  sei();
  81:minitvbgone12_v4.c **** 			for (i=0;i<15;i++) {
  82:minitvbgone12_v4.c **** 			  delay_ten_us(65500); // 10s
  83:minitvbgone12_v4.c **** 			  wdt_reset();
  84:minitvbgone12_v4.c **** 		    }
  85:minitvbgone12_v4.c **** }
  86:minitvbgone12_v4.c **** 
  87:minitvbgone12_v4.c **** int main(void) {
  88:minitvbgone12_v4.c ****   uint16_t ontime, offtime;
  89:minitvbgone12_v4.c ****   uint8_t j,i,loopgrn;
  90:minitvbgone12_v4.c **** 
  91:minitvbgone12_v4.c ****   //TCCR1 = 0;		   	   // Turn off PWM/freq gen, should be off already
  92:minitvbgone12_v4.c ****   //TCCR0A = 0;
  93:minitvbgone12_v4.c ****   //TCCR0B = 0;
  94:minitvbgone12_v4.c **** 
  95:minitvbgone12_v4.c ****   MCUSR = 0;                     // clear watchdog flag
  96:minitvbgone12_v4.c ****   WDTCR = _BV(WDCE) | _BV(WDE);  // enable WDT disable
  97:minitvbgone12_v4.c **** 
  98:minitvbgone12_v4.c ****   WDTCR = 0;                     // disable WDT while we setup
  99:minitvbgone12_v4.c **** 
 100:minitvbgone12_v4.c ****   //GIMSK = 0;
 101:minitvbgone12_v4.c **** 
 102:minitvbgone12_v4.c ****   DDRB = _BV(LED) | _BV(IRLED);  // set the visible and IR LED pins to outputs
 103:minitvbgone12_v4.c ****   PORTB = 0b00000110;			 // Pullup
 104:minitvbgone12_v4.c **** 
 105:minitvbgone12_v4.c ****   delay_ten_us(6000);
 106:minitvbgone12_v4.c **** 
 107:minitvbgone12_v4.c ****   if (!bit_is_set(PINB,GRENADE)) setgrenade();
 108:minitvbgone12_v4.c **** 
 109:minitvbgone12_v4.c ****   while(!bit_is_set(PINB,PB2)) {};
 110:minitvbgone12_v4.c **** 	delay_ten_us(6000);
 111:minitvbgone12_v4.c **** 
 112:minitvbgone12_v4.c ****   for (i=0;i<255;i++) {
 113:minitvbgone12_v4.c **** 	delay_ten_us(300);
 114:minitvbgone12_v4.c **** 	if (!bit_is_set(PINB,PB2)) {
 115:minitvbgone12_v4.c **** 		setgrenade();
 116:minitvbgone12_v4.c **** 		break;
 117:minitvbgone12_v4.c **** 	}
 118:minitvbgone12_v4.c ****   }
 119:minitvbgone12_v4.c **** 
 120:minitvbgone12_v4.c ****   GIMSK = _BV(INT0);
 121:minitvbgone12_v4.c **** 
 122:minitvbgone12_v4.c ****   //delay_ten_us(5000);            // Let everything settle for a bit
 123:minitvbgone12_v4.c ****   
 124:minitvbgone12_v4.c ****   
 125:minitvbgone12_v4.c ****   // turn on watchdog timer immediately, this protects against
 126:minitvbgone12_v4.c ****   // a 'stuck' system by resetting it
 127:minitvbgone12_v4.c ****   wdt_enable(WDTO_8S); // 1 second long timeout
 128:minitvbgone12_v4.c **** 
 129:minitvbgone12_v4.c **** 	  sei();
 130:minitvbgone12_v4.c **** 
 131:minitvbgone12_v4.c **** for (;;) {
 132:minitvbgone12_v4.c **** 
 133:minitvbgone12_v4.c **** 	for(loopgrn=0;loopgrn<grenade+1;loopgrn++) {
 134:minitvbgone12_v4.c ****       j = num_EUcodes;
 135:minitvbgone12_v4.c **** 
 136:minitvbgone12_v4.c **** 	  if (grenade) quickflashLEDx(5);
 137:minitvbgone12_v4.c **** 
 138:minitvbgone12_v4.c ****     // for every POWER code in our collection
 139:minitvbgone12_v4.c **** 	    for(i=0 ; i < j; i++) {   
 140:minitvbgone12_v4.c **** 
 141:minitvbgone12_v4.c **** 	      //To keep Watchdog from resetting in middle of code.
 142:minitvbgone12_v4.c **** 	      wdt_reset();
 143:minitvbgone12_v4.c **** 
 144:minitvbgone12_v4.c **** 		  code_ptr = (PGM_P)pgm_read_word(EUpowerCodes+i);
 145:minitvbgone12_v4.c **** 
 146:minitvbgone12_v4.c **** 	      // Read the carrier frequency from the first byte of code structure
 147:minitvbgone12_v4.c **** 	      const uint8_t freq = pgm_read_byte(code_ptr++);
 148:minitvbgone12_v4.c **** 	      // set OCR for Timer1 to output this POWER code's carrier frequency
 149:minitvbgone12_v4.c **** 	      OCR0A = freq; 
 150:minitvbgone12_v4.c ****       
 151:minitvbgone12_v4.c **** 	      // Get the number of pairs, the second byte from the code struct
 152:minitvbgone12_v4.c **** 	      const uint8_t numpairs = pgm_read_byte(code_ptr++);
 153:minitvbgone12_v4.c **** 
 154:minitvbgone12_v4.c **** 	      // Get the number of bits we use to index into the timer table
 155:minitvbgone12_v4.c **** 	      // This is the third byte of the structure
 156:minitvbgone12_v4.c **** 	      const uint8_t bitcompression = pgm_read_byte(code_ptr++);
 157:minitvbgone12_v4.c **** 
 158:minitvbgone12_v4.c **** 	      // Get pointer (address in memory) to pulse-times table
 159:minitvbgone12_v4.c **** 	      // The address is 16-bits (2 byte, 1 word)
 160:minitvbgone12_v4.c **** 	      const PGM_P time_ptr = (PGM_P)pgm_read_word(code_ptr);
 161:minitvbgone12_v4.c **** 	      code_ptr+=2;
 162:minitvbgone12_v4.c **** 
 163:minitvbgone12_v4.c **** 	      // For EACH pair in this code....
 164:minitvbgone12_v4.c **** 	      for (uint8_t k=0; k<numpairs; k++) {
 165:minitvbgone12_v4.c **** 			uint8_t ti;
 166:minitvbgone12_v4.c **** 	
 167:minitvbgone12_v4.c **** 			// Read the next 'n' bits as indicated by the compression variable
 168:minitvbgone12_v4.c **** 			// The multiply by 4 because there are 2 timing numbers per pair
 169:minitvbgone12_v4.c **** 			// and each timing number is one word long, so 4 bytes total!
 170:minitvbgone12_v4.c **** 			ti = (read_bits(bitcompression)) * 4;
 171:minitvbgone12_v4.c **** 
 172:minitvbgone12_v4.c **** 			// read the onTime and offTime from the program memory
 173:minitvbgone12_v4.c **** 			ontime = pgm_read_word(time_ptr+ti);  // read word 1 - ontime
 174:minitvbgone12_v4.c **** 			offtime = pgm_read_word(time_ptr+ti+2);  // read word 2 - offtime
 175:minitvbgone12_v4.c **** 
 176:minitvbgone12_v4.c **** 			// transmit this codeElement (ontime and offtime)
 177:minitvbgone12_v4.c **** 			xmitCodeElement(ontime, offtime, (freq!=0));  
 178:minitvbgone12_v4.c **** 	      } 
 179:minitvbgone12_v4.c ****       
 180:minitvbgone12_v4.c **** 	      //Flush remaining bits, so that next code starts
 181:minitvbgone12_v4.c **** 	      //with a fresh set of 8 bits.
 182:minitvbgone12_v4.c **** 	      bitsleft_r=0;	
 183:minitvbgone12_v4.c **** 
 184:minitvbgone12_v4.c **** 	      // delay 250 milliseconds before transmitting next POWER code
 185:minitvbgone12_v4.c **** 	      delay_ten_us(25000);
 186:minitvbgone12_v4.c ****       
 187:minitvbgone12_v4.c **** 	      // visible indication that a code has been output.
 188:minitvbgone12_v4.c **** 	      if (!grenade) quickflashLEDx(1); 
 189:minitvbgone12_v4.c **** 		}
 190:minitvbgone12_v4.c **** 	    if (grenade) {
 191:minitvbgone12_v4.c **** 			PORTB = 0b00000110;	// Pullup
 192:minitvbgone12_v4.c **** 			for (i=0;i<44;i++) {
 193:minitvbgone12_v4.c **** 			  delay_ten_us(65500); // 29s
 194:minitvbgone12_v4.c **** 			  wdt_reset();
 195:minitvbgone12_v4.c **** 		    }
 196:minitvbgone12_v4.c **** 	  	}
 197:minitvbgone12_v4.c ****   	  }  
 198:minitvbgone12_v4.c **** 
 199:minitvbgone12_v4.c **** 	  // We are done, no need for a watchdog timer anymore
 200:minitvbgone12_v4.c **** 	  wdt_disable();
 201:minitvbgone12_v4.c **** 
 202:minitvbgone12_v4.c **** 	  // flash the visible LED on PB0  4 times to indicate that we're done
 203:minitvbgone12_v4.c **** 	  quickflashLEDx(10);
 204:minitvbgone12_v4.c **** 
 205:minitvbgone12_v4.c **** 	  // Shut down everything and put the CPU to sleep
 206:minitvbgone12_v4.c **** 	  TCCR0A = 0;           // turn off frequency generator (should be off already)
 207:minitvbgone12_v4.c **** 	  //TCCR0B = 0;           // turn off frequency generator (should be off already)
 208:minitvbgone12_v4.c **** 	  PORTB = 0b00000100;	// Pullup
 209:minitvbgone12_v4.c **** 
 210:minitvbgone12_v4.c **** 	  wdt_disable();           // turn off the watchdog (since we want to sleep
 211:minitvbgone12_v4.c **** 	  //delay_ten_us(1000);      // wait 10 millisec
 212:minitvbgone12_v4.c **** 
 213:minitvbgone12_v4.c **** 	  GIMSK = _BV(INT0);
 214:minitvbgone12_v4.c **** 	  MCUCR = _BV(SM1) |  _BV(SE);    // power down mode,  SE enables Sleep Modes
 215:minitvbgone12_v4.c **** 	  sleep_cpu();                    // put CPU into Power Down Sleep Mode
 216:minitvbgone12_v4.c **** 
 217:minitvbgone12_v4.c **** 	  //quickflashLEDx(4);
 218:minitvbgone12_v4.c ****   	  wdt_enable(WDTO_15MS); // 1 second long timeout
 219:minitvbgone12_v4.c **** 	  for(;;) {} // Watchdog lol
 220:minitvbgone12_v4.c **** 	}
 221:minitvbgone12_v4.c **** }
 222:minitvbgone12_v4.c **** 
 223:minitvbgone12_v4.c **** 
 224:minitvbgone12_v4.c **** 
 225:minitvbgone12_v4.c **** /****************************** LED AND DELAY FUNCTIONS ********/
 226:minitvbgone12_v4.c **** 
 227:minitvbgone12_v4.c **** 
 228:minitvbgone12_v4.c **** // This function delays the specified number of 10 microseconds
 229:minitvbgone12_v4.c **** // it is 'hardcoded' and is calibrated by adjusting DELAY_CNT 
 230:minitvbgone12_v4.c **** // in main.h Unless you are changing the crystal from 8mhz, dont
 231:minitvbgone12_v4.c **** // mess with this.
 232:minitvbgone12_v4.c **** void delay_ten_us(uint16_t us) {
 170               		.loc 1 232 0
 171               		.cfi_startproc
 172               	.LVL11:
 173               	/* prologue: function */
 174               	/* frame size = 0 */
 175               	/* stack size = 0 */
 176               	.L__stack_usage = 0
 233:minitvbgone12_v4.c ****   uint8_t timer;
 234:minitvbgone12_v4.c ****   while (us != 0) {
 177               		.loc 1 234 0
 178 009a 00C0      		rjmp .L8
 179               	.L10:
 180 009c 2CE0      		ldi r18,lo8(12)
 181               	.L9:
 235:minitvbgone12_v4.c ****     // for 8MHz we want to delay 80 cycles per 10 microseconds
 236:minitvbgone12_v4.c ****     // this code is tweaked to give about that amount.
 237:minitvbgone12_v4.c ****     for (timer=0; timer <= DELAY_CNT; timer++) {
 238:minitvbgone12_v4.c ****       NOP;
 182               		.loc 1 238 0 discriminator 2
 183               	/* #APP */
 184               	 ;  238 "minitvbgone12_v4.c" 1
 185 009e 0000      		nop
 186               	 ;  0 "" 2
 239:minitvbgone12_v4.c ****       NOP;
 187               		.loc 1 239 0 discriminator 2
 188               	 ;  239 "minitvbgone12_v4.c" 1
 189 00a0 0000      		nop
 190               	 ;  0 "" 2
 191               	.LVL12:
 192               	/* #NOAPP */
 193 00a2 2150      		subi r18,lo8(-(-1))
 237:minitvbgone12_v4.c ****     for (timer=0; timer <= DELAY_CNT; timer++) {
 194               		.loc 1 237 0 discriminator 2
 195 00a4 01F4      		brne .L9
 240:minitvbgone12_v4.c ****     }
 241:minitvbgone12_v4.c ****     NOP;
 196               		.loc 1 241 0
 197               	/* #APP */
 198               	 ;  241 "minitvbgone12_v4.c" 1
 199 00a6 0000      		nop
 200               	 ;  0 "" 2
 242:minitvbgone12_v4.c ****     us--;
 201               		.loc 1 242 0
 202               	/* #NOAPP */
 203 00a8 0197      		sbiw r24,1
 204               	.LVL13:
 205               	.L8:
 234:minitvbgone12_v4.c ****   while (us != 0) {
 206               		.loc 1 234 0 discriminator 1
 207 00aa 0097      		sbiw r24,0
 208 00ac 01F4      		brne .L10
 209               	/* epilogue start */
 243:minitvbgone12_v4.c ****   }
 244:minitvbgone12_v4.c **** }
 210               		.loc 1 244 0
 211 00ae 0895      		ret
 212               		.cfi_endproc
 213               	.LFE6:
 215               	.global	xmitCodeElement
 217               	xmitCodeElement:
 218               	.LFB1:
  21:minitvbgone12_v4.c **** {
 219               		.loc 1 21 0
 220               		.cfi_startproc
 221               	.LVL14:
 222 00b0 CF93      		push r28
 223               	.LCFI5:
 224               		.cfi_def_cfa_offset 3
 225               		.cfi_offset 28, -2
 226 00b2 DF93      		push r29
 227               	.LCFI6:
 228               		.cfi_def_cfa_offset 4
 229               		.cfi_offset 29, -3
 230               	/* prologue: function */
 231               	/* frame size = 0 */
 232               	/* stack size = 2 */
 233               	.L__stack_usage = 2
 234 00b4 EB01      		movw r28,r22
  22:minitvbgone12_v4.c ****   TCNT0 = 0; // reset the timers so they are aligned
 235               		.loc 1 22 0
 236 00b6 12BE      		out 0x32,__zero_reg__
  23:minitvbgone12_v4.c ****   TIFR = 0;  // clean out the timer flags
 237               		.loc 1 23 0
 238 00b8 18BE      		out 0x38,__zero_reg__
  25:minitvbgone12_v4.c ****   if(PWM_code) {
 239               		.loc 1 25 0
 240 00ba 4423      		tst r20
 241 00bc 01F0      		breq .L13
  26:minitvbgone12_v4.c ****     TCCR0A =_BV(COM0A0) | _BV(WGM01);          // Set up timer 0
 242               		.loc 1 26 0
 243 00be 22E4      		ldi r18,lo8(66)
 244 00c0 2ABD      		out 0x2a,r18
  27:minitvbgone12_v4.c ****     TCCR0B = _BV(CS00);
 245               		.loc 1 27 0
 246 00c2 21E0      		ldi r18,lo8(1)
 247 00c4 23BF      		out 0x33,r18
 248 00c6 00C0      		rjmp .L14
 249               	.L13:
  29:minitvbgone12_v4.c ****     PORTB |= _BV(IRLED);
 250               		.loc 1 29 0
 251 00c8 C09A      		sbi 0x18,0
 252               	.L14:
  32:minitvbgone12_v4.c ****   delay_ten_us(ontime);
 253               		.loc 1 32 0
 254 00ca 00D0      		rcall delay_ten_us
 255               	.LVL15:
  34:minitvbgone12_v4.c ****   TCCR0A = 0;
 256               		.loc 1 34 0
 257 00cc 1ABC      		out 0x2a,__zero_reg__
  35:minitvbgone12_v4.c ****   TCCR0B = 0;
 258               		.loc 1 35 0
 259 00ce 13BE      		out 0x33,__zero_reg__
  36:minitvbgone12_v4.c ****   PORTB &= ~_BV(IRLED);           // turn off IR LED 2N2222
 260               		.loc 1 36 0
 261 00d0 C098      		cbi 0x18,0
  39:minitvbgone12_v4.c ****   delay_ten_us(offtime);
 262               		.loc 1 39 0
 263 00d2 CE01      		movw r24,r28
 264               	/* epilogue start */
  40:minitvbgone12_v4.c **** }
 265               		.loc 1 40 0
 266 00d4 DF91      		pop r29
 267 00d6 CF91      		pop r28
 268               	.LVL16:
  39:minitvbgone12_v4.c ****   delay_ten_us(offtime);
 269               		.loc 1 39 0
 270 00d8 00C0      		rjmp delay_ten_us
 271               	.LVL17:
 272               		.cfi_endproc
 273               	.LFE1:
 275               	.global	quickflashLEDx
 277               	quickflashLEDx:
 278               	.LFB7:
 245:minitvbgone12_v4.c **** 
 246:minitvbgone12_v4.c **** // This function just flashes the visible LED a couple times, used to
 247:minitvbgone12_v4.c **** // tell the user what region is selected
 248:minitvbgone12_v4.c **** void quickflashLEDx( uint8_t x ) {
 279               		.loc 1 248 0
 280               		.cfi_startproc
 281               	.LVL18:
 282 00da CF93      		push r28
 283               	.LCFI7:
 284               		.cfi_def_cfa_offset 3
 285               		.cfi_offset 28, -2
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 1 */
 289               	.L__stack_usage = 1
 290 00dc C82F      		mov r28,r24
 249:minitvbgone12_v4.c ****   while(x--) {
 291               		.loc 1 249 0
 292 00de 00C0      		rjmp .L16
 293               	.LVL19:
 294               	.L17:
 250:minitvbgone12_v4.c **** 	delay_ten_us(15000);     // 150 millisec delay between flahes
 295               		.loc 1 250 0
 296 00e0 88E9      		ldi r24,lo8(-104)
 297 00e2 9AE3      		ldi r25,lo8(58)
 298 00e4 00D0      		rcall delay_ten_us
 299               	.LVL20:
 251:minitvbgone12_v4.c ****   PORTB |= _BV(LED);   // turn on visible LED at PB0 by pulling pin to ground
 300               		.loc 1 251 0
 301 00e6 C39A      		sbi 0x18,3
 252:minitvbgone12_v4.c ****   delay_ten_us(1000);   // 30 millisec delay
 302               		.loc 1 252 0
 303 00e8 88EE      		ldi r24,lo8(-24)
 304 00ea 93E0      		ldi r25,lo8(3)
 305 00ec 00D0      		rcall delay_ten_us
 306               	.LVL21:
 253:minitvbgone12_v4.c ****   PORTB &=~ _BV(LED);    // turn off visible LED at PB0 by pulling pin to +3V
 307               		.loc 1 253 0
 308 00ee C398      		cbi 0x18,3
 254:minitvbgone12_v4.c ****   	wdt_reset();
 309               		.loc 1 254 0
 310               	/* #APP */
 311               	 ;  254 "minitvbgone12_v4.c" 1
 312 00f0 A895      		wdr
 313               	 ;  0 "" 2
 314               	/* #NOAPP */
 315 00f2 C150      		subi r28,lo8(-(-1))
 316               	.L16:
 249:minitvbgone12_v4.c ****   while(x--) {
 317               		.loc 1 249 0 discriminator 1
 318 00f4 C111      		cpse r28,__zero_reg__
 319 00f6 00C0      		rjmp .L17
 320               	/* epilogue start */
 255:minitvbgone12_v4.c ****   }
 256:minitvbgone12_v4.c ****   //wdt_reset();                // kick the dog
 257:minitvbgone12_v4.c **** }
 321               		.loc 1 257 0
 322 00f8 CF91      		pop r28
 323 00fa 0895      		ret
 324               		.cfi_endproc
 325               	.LFE7:
 327               	.global	setgrenade
 329               	setgrenade:
 330               	.LFB4:
  75:minitvbgone12_v4.c **** void setgrenade(void) {
 331               		.loc 1 75 0
 332               		.cfi_startproc
 333 00fc CF93      		push r28
 334               	.LCFI8:
 335               		.cfi_def_cfa_offset 3
 336               		.cfi_offset 28, -2
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 1 */
 340               	.L__stack_usage = 1
  77:minitvbgone12_v4.c ****   	grenade=9;
 341               		.loc 1 77 0
 342 00fe 89E0      		ldi r24,lo8(9)
 343 0100 8093 0000 		sts grenade,r24
  78:minitvbgone12_v4.c **** 	quickflashLEDx(5);
 344               		.loc 1 78 0
 345 0104 85E0      		ldi r24,lo8(5)
 346 0106 00D0      		rcall quickflashLEDx
 347               	.LVL22:
  79:minitvbgone12_v4.c ****   GIMSK = _BV(INT0);
 348               		.loc 1 79 0
 349 0108 80E4      		ldi r24,lo8(64)
 350 010a 8BBF      		out 0x3b,r24
  80:minitvbgone12_v4.c **** 	  sei();
 351               		.loc 1 80 0
 352               	/* #APP */
 353               	 ;  80 "minitvbgone12_v4.c" 1
 354 010c 7894      		sei
 355               	 ;  0 "" 2
 356               	.LVL23:
 357               	/* #NOAPP */
 358 010e CFE0      		ldi r28,lo8(15)
 359               	.LVL24:
 360               	.L19:
  82:minitvbgone12_v4.c **** 			  delay_ten_us(65500); // 10s
 361               		.loc 1 82 0 discriminator 2
 362 0110 8CED      		ldi r24,lo8(-36)
 363 0112 9FEF      		ldi r25,lo8(-1)
 364 0114 00D0      		rcall delay_ten_us
 365               	.LVL25:
  83:minitvbgone12_v4.c **** 			  wdt_reset();
 366               		.loc 1 83 0 discriminator 2
 367               	/* #APP */
 368               	 ;  83 "minitvbgone12_v4.c" 1
 369 0116 A895      		wdr
 370               	 ;  0 "" 2
 371               	/* #NOAPP */
 372 0118 C150      		subi r28,lo8(-(-1))
  81:minitvbgone12_v4.c **** 			for (i=0;i<15;i++) {
 373               		.loc 1 81 0 discriminator 2
 374 011a 01F4      		brne .L19
 375               	/* epilogue start */
  85:minitvbgone12_v4.c **** }
 376               		.loc 1 85 0
 377 011c CF91      		pop r28
 378 011e 0895      		ret
 379               		.cfi_endproc
 380               	.LFE4:
 382               		.section	.text.startup,"ax",@progbits
 383               	.global	main
 385               	main:
 386               	.LFB5:
  87:minitvbgone12_v4.c **** int main(void) {
 387               		.loc 1 87 0
 388               		.cfi_startproc
 389               	/* prologue: function */
 390               	/* frame size = 0 */
 391               	/* stack size = 0 */
 392               	.L__stack_usage = 0
  95:minitvbgone12_v4.c ****   MCUSR = 0;                     // clear watchdog flag
 393               		.loc 1 95 0
 394 0000 14BE      		out 0x34,__zero_reg__
  96:minitvbgone12_v4.c ****   WDTCR = _BV(WDCE) | _BV(WDE);  // enable WDT disable
 395               		.loc 1 96 0
 396 0002 88E1      		ldi r24,lo8(24)
 397 0004 81BD      		out 0x21,r24
  98:minitvbgone12_v4.c ****   WDTCR = 0;                     // disable WDT while we setup
 398               		.loc 1 98 0
 399 0006 11BC      		out 0x21,__zero_reg__
 102:minitvbgone12_v4.c ****   DDRB = _BV(LED) | _BV(IRLED);  // set the visible and IR LED pins to outputs
 400               		.loc 1 102 0
 401 0008 89E0      		ldi r24,lo8(9)
 402 000a 87BB      		out 0x17,r24
 103:minitvbgone12_v4.c ****   PORTB = 0b00000110;			 // Pullup
 403               		.loc 1 103 0
 404 000c 86E0      		ldi r24,lo8(6)
 405 000e 88BB      		out 0x18,r24
 105:minitvbgone12_v4.c ****   delay_ten_us(6000);
 406               		.loc 1 105 0
 407 0010 80E7      		ldi r24,lo8(112)
 408 0012 97E1      		ldi r25,lo8(23)
 409 0014 00D0      		rcall delay_ten_us
 410               	.LVL26:
 107:minitvbgone12_v4.c ****   if (!bit_is_set(PINB,GRENADE)) setgrenade();
 411               		.loc 1 107 0
 412 0016 B19B      		sbis 0x16,1
 107:minitvbgone12_v4.c ****   if (!bit_is_set(PINB,GRENADE)) setgrenade();
 413               		.loc 1 107 0 is_stmt 0 discriminator 1
 414 0018 00D0      		rcall setgrenade
 415               	.LVL27:
 416               	.L44:
 109:minitvbgone12_v4.c ****   while(!bit_is_set(PINB,PB2)) {};
 417               		.loc 1 109 0 is_stmt 1 discriminator 1
 418 001a B29B      		sbis 0x16,2
 419 001c 00C0      		rjmp .L44
 110:minitvbgone12_v4.c **** 	delay_ten_us(6000);
 420               		.loc 1 110 0
 421 001e 80E7      		ldi r24,lo8(112)
 422 0020 97E1      		ldi r25,lo8(23)
 423 0022 00D0      		rcall delay_ten_us
 424               	.LVL28:
 425 0024 CFEF      		ldi r28,lo8(-1)
 426               	.LVL29:
 427               	.L26:
 113:minitvbgone12_v4.c **** 	delay_ten_us(300);
 428               		.loc 1 113 0
 429 0026 8CE2      		ldi r24,lo8(44)
 430 0028 91E0      		ldi r25,lo8(1)
 431 002a 00D0      		rcall delay_ten_us
 432               	.LVL30:
 114:minitvbgone12_v4.c **** 	if (!bit_is_set(PINB,PB2)) {
 433               		.loc 1 114 0
 434 002c B299      		sbic 0x16,2
 435 002e 00C0      		rjmp .L24
 115:minitvbgone12_v4.c **** 		setgrenade();
 436               		.loc 1 115 0
 437 0030 00D0      		rcall setgrenade
 438               	.LVL31:
 116:minitvbgone12_v4.c **** 		break;
 439               		.loc 1 116 0
 440 0032 00C0      		rjmp .L25
 441               	.L24:
 442 0034 C150      		subi r28,lo8(-(-1))
 112:minitvbgone12_v4.c ****   for (i=0;i<255;i++) {
 443               		.loc 1 112 0
 444 0036 01F4      		brne .L26
 445               	.L25:
 120:minitvbgone12_v4.c ****   GIMSK = _BV(INT0);
 446               		.loc 1 120 0
 447 0038 80E4      		ldi r24,lo8(64)
 448 003a 8BBF      		out 0x3b,r24
 127:minitvbgone12_v4.c ****   wdt_enable(WDTO_8S); // 1 second long timeout
 449               		.loc 1 127 0
 450 003c 29E2      		ldi r18,lo8(41)
 451 003e 88E1      		ldi r24,lo8(24)
 452 0040 90E0      		ldi r25,0
 453               	/* #APP */
 454               	 ;  127 "minitvbgone12_v4.c" 1
 455 0042 0FB6      		in __tmp_reg__,__SREG__
 456 0044 F894      		cli
 457 0046 A895      		wdr
 458 0048 81BD      		out 33,r24
 459 004a 0FBE      		out __SREG__,__tmp_reg__
 460 004c 21BD      		out 33,r18
 461               	 ;  0 "" 2
 129:minitvbgone12_v4.c **** 	  sei();
 462               		.loc 1 129 0
 463               	 ;  129 "minitvbgone12_v4.c" 1
 464 004e 7894      		sei
 465               	 ;  0 "" 2
 466               	.LVL32:
 133:minitvbgone12_v4.c **** 	for(loopgrn=0;loopgrn<grenade+1;loopgrn++) {
 467               		.loc 1 133 0
 468               	/* #NOAPP */
 469 0050 F12C      		mov r15,__zero_reg__
 134:minitvbgone12_v4.c ****       j = num_EUcodes;
 470               		.loc 1 134 0
 471 0052 C090 0000 		lds r12,num_EUcodes
 191:minitvbgone12_v4.c **** 			PORTB = 0b00000110;	// Pullup
 472               		.loc 1 191 0
 473 0056 86E0      		ldi r24,lo8(6)
 474 0058 B82E      		mov r11,r24
 133:minitvbgone12_v4.c **** 	for(loopgrn=0;loopgrn<grenade+1;loopgrn++) {
 475               		.loc 1 133 0
 476 005a 00C0      		rjmp .L27
 477               	.LVL33:
 478               	.L38:
 136:minitvbgone12_v4.c **** 	  if (grenade) quickflashLEDx(5);
 479               		.loc 1 136 0
 480 005c 4423      		tst r20
 481 005e 01F0      		breq .L28
 136:minitvbgone12_v4.c **** 	  if (grenade) quickflashLEDx(5);
 482               		.loc 1 136 0 is_stmt 0 discriminator 1
 483 0060 85E0      		ldi r24,lo8(5)
 484 0062 00D0      		rcall quickflashLEDx
 485               	.LVL34:
 486               	.L28:
 487 0064 00E0      		ldi r16,lo8(EUpowerCodes)
 488 0066 10E0      		ldi r17,hi8(EUpowerCodes)
 489               	.LBB3:
 490               	.LBB4:
 164:minitvbgone12_v4.c **** 	      for (uint8_t k=0; k<numpairs; k++) {
 491               		.loc 1 164 0 is_stmt 1 discriminator 1
 492 0068 E12C      		mov r14,__zero_reg__
 493 006a 00C0      		rjmp .L29
 494               	.LVL35:
 495               	.L34:
 496               	.LBE4:
 142:minitvbgone12_v4.c **** 	      wdt_reset();
 497               		.loc 1 142 0
 498               	/* #APP */
 499               	 ;  142 "minitvbgone12_v4.c" 1
 500 006c A895      		wdr
 501               	 ;  0 "" 2
 502               	.LVL36:
 503               	/* #NOAPP */
 504               	.LBB8:
 144:minitvbgone12_v4.c **** 		  code_ptr = (PGM_P)pgm_read_word(EUpowerCodes+i);
 505               		.loc 1 144 0
 506 006e F801      		movw r30,r16
 507               	/* #APP */
 508               	 ;  144 "minitvbgone12_v4.c" 1
 509 0070 2591      		lpm r18, Z+
 510 0072 3491      		lpm r19, Z
 511               		
 512               	 ;  0 "" 2
 513               	.LVL37:
 514               	/* #NOAPP */
 515               	.LBE8:
 516               	.LBB9:
 147:minitvbgone12_v4.c **** 	      const uint8_t freq = pgm_read_byte(code_ptr++);
 517               		.loc 1 147 0
 518 0074 C901      		movw r24,r18
 519 0076 0196      		adiw r24,1
 520 0078 F901      		movw r30,r18
 521               	/* #APP */
 522               	 ;  147 "minitvbgone12_v4.c" 1
 523 007a D490      		lpm r13, Z
 524               		
 525               	 ;  0 "" 2
 526               	.LVL38:
 527               	/* #NOAPP */
 528               	.LBE9:
 149:minitvbgone12_v4.c **** 	      OCR0A = freq; 
 529               		.loc 1 149 0
 530 007c D9BC      		out 0x29,r13
 531               	.LVL39:
 532               	.LBB10:
 152:minitvbgone12_v4.c **** 	      const uint8_t numpairs = pgm_read_byte(code_ptr++);
 533               		.loc 1 152 0
 534 007e FC01      		movw r30,r24
 535               	/* #APP */
 536               	 ;  152 "minitvbgone12_v4.c" 1
 537 0080 A490      		lpm r10, Z
 538               		
 539               	 ;  0 "" 2
 540               	.LVL40:
 541               	/* #NOAPP */
 542 0082 3196      		adiw r30,1
 543               	.LBE10:
 544               	.LBB11:
 156:minitvbgone12_v4.c **** 	      const uint8_t bitcompression = pgm_read_byte(code_ptr++);
 545               		.loc 1 156 0
 546               	/* #APP */
 547               	 ;  156 "minitvbgone12_v4.c" 1
 548 0084 9490      		lpm r9, Z
 549               		
 550               	 ;  0 "" 2
 551               	.LVL41:
 552               	/* #NOAPP */
 553 0086 F901      		movw r30,r18
 554 0088 3396      		adiw r30,3
 555               	.LVL42:
 556               	.LBE11:
 557               	.LBB12:
 160:minitvbgone12_v4.c **** 	      const PGM_P time_ptr = (PGM_P)pgm_read_word(code_ptr);
 558               		.loc 1 160 0
 559               	/* #APP */
 560               	 ;  160 "minitvbgone12_v4.c" 1
 561 008a 8591      		lpm r24, Z+
 562 008c 9491      		lpm r25, Z
 563               		
 564               	 ;  0 "" 2
 565               	.LVL43:
 566               	/* #NOAPP */
 567               	.LBE12:
 568 008e C82F      		mov r28,r24
 569 0090 D92F      		mov r29,r25
 570               	.LVL44:
 161:minitvbgone12_v4.c **** 	      code_ptr+=2;
 571               		.loc 1 161 0
 572 0092 2B5F      		subi r18,-5
 573 0094 3F4F      		sbci r19,-1
 574               	.LVL45:
 575 0096 3093 0000 		sts code_ptr+1,r19
 576 009a 2093 0000 		sts code_ptr,r18
 577               	.LVL46:
 578               	.LBB13:
 164:minitvbgone12_v4.c **** 	      for (uint8_t k=0; k<numpairs; k++) {
 579               		.loc 1 164 0
 580 009e 812C      		mov r8,__zero_reg__
 581 00a0 00C0      		rjmp .L30
 582               	.LVL47:
 583               	.L32:
 584               	.LBB5:
 170:minitvbgone12_v4.c **** 			ti = (read_bits(bitcompression)) * 4;
 585               		.loc 1 170 0 discriminator 2
 586 00a2 892D      		mov r24,r9
 587 00a4 00D0      		rcall read_bits
 588               	.LVL48:
 589 00a6 880F      		lsl r24
 590 00a8 880F      		lsl r24
 591               	.LVL49:
 592               	.LBB6:
 173:minitvbgone12_v4.c **** 			ontime = pgm_read_word(time_ptr+ti);  // read word 1 - ontime
 593               		.loc 1 173 0 discriminator 2
 594 00aa 282F      		mov r18,r24
 595 00ac 30E0      		ldi r19,0
 596 00ae FE01      		movw r30,r28
 597 00b0 E20F      		add r30,r18
 598 00b2 F31F      		adc r31,r19
 599               	.LVL50:
 600               	/* #APP */
 601               	 ;  173 "minitvbgone12_v4.c" 1
 602 00b4 4591      		lpm r20, Z+
 603 00b6 5491      		lpm r21, Z
 604               		
 605               	 ;  0 "" 2
 606               	.LVL51:
 607               	/* #NOAPP */
 608 00b8 CA01      		movw r24,r20
 609               	.LVL52:
 610               	.LBE6:
 611               	.LBB7:
 174:minitvbgone12_v4.c **** 			offtime = pgm_read_word(time_ptr+ti+2);  // read word 2 - offtime
 612               		.loc 1 174 0 discriminator 2
 613 00ba F901      		movw r30,r18
 614 00bc 3296      		adiw r30,2
 615 00be EC0F      		add r30,r28
 616 00c0 FD1F      		adc r31,r29
 617               	.LVL53:
 618               	/* #APP */
 619               	 ;  174 "minitvbgone12_v4.c" 1
 620 00c2 2591      		lpm r18, Z+
 621 00c4 3491      		lpm r19, Z
 622               		
 623               	 ;  0 "" 2
 624               	.LVL54:
 625               	/* #NOAPP */
 626 00c6 B901      		movw r22,r18
 627               	.LVL55:
 628               	.LBE7:
 177:minitvbgone12_v4.c **** 			xmitCodeElement(ontime, offtime, (freq!=0));  
 629               		.loc 1 177 0 discriminator 2
 630 00c8 41E0      		ldi r20,lo8(1)
 631 00ca D110      		cpse r13,__zero_reg__
 632 00cc 00C0      		rjmp .L31
 633 00ce 40E0      		ldi r20,0
 634               	.L31:
 635 00d0 00D0      		rcall xmitCodeElement
 636               	.LVL56:
 637               	.LBE5:
 164:minitvbgone12_v4.c **** 	      for (uint8_t k=0; k<numpairs; k++) {
 638               		.loc 1 164 0 discriminator 2
 639 00d2 8394      		inc r8
 640               	.LVL57:
 641               	.L30:
 164:minitvbgone12_v4.c **** 	      for (uint8_t k=0; k<numpairs; k++) {
 642               		.loc 1 164 0 is_stmt 0 discriminator 1
 643 00d4 8A10      		cpse r8,r10
 644 00d6 00C0      		rjmp .L32
 645               	.LBE13:
 182:minitvbgone12_v4.c **** 	      bitsleft_r=0;	
 646               		.loc 1 182 0 is_stmt 1
 647 00d8 1092 0000 		sts bitsleft_r,__zero_reg__
 185:minitvbgone12_v4.c **** 	      delay_ten_us(25000);
 648               		.loc 1 185 0
 649 00dc 88EA      		ldi r24,lo8(-88)
 650 00de 91E6      		ldi r25,lo8(97)
 651 00e0 00D0      		rcall delay_ten_us
 652               	.LVL58:
 188:minitvbgone12_v4.c **** 	      if (!grenade) quickflashLEDx(1); 
 653               		.loc 1 188 0
 654 00e2 8091 0000 		lds r24,grenade
 655 00e6 8111      		cpse r24,__zero_reg__
 656 00e8 00C0      		rjmp .L33
 188:minitvbgone12_v4.c **** 	      if (!grenade) quickflashLEDx(1); 
 657               		.loc 1 188 0 is_stmt 0 discriminator 1
 658 00ea 81E0      		ldi r24,lo8(1)
 659 00ec 00D0      		rcall quickflashLEDx
 660               	.LVL59:
 661               	.L33:
 662               	.LBE3:
 139:minitvbgone12_v4.c **** 	    for(i=0 ; i < j; i++) {   
 663               		.loc 1 139 0 is_stmt 1
 664 00ee E394      		inc r14
 665               	.LVL60:
 666 00f0 0E5F      		subi r16,-2
 667 00f2 1F4F      		sbci r17,-1
 668               	.LVL61:
 669               	.L29:
 139:minitvbgone12_v4.c **** 	    for(i=0 ; i < j; i++) {   
 670               		.loc 1 139 0 is_stmt 0 discriminator 1
 671 00f4 EC10      		cpse r14,r12
 672 00f6 00C0      		rjmp .L34
 190:minitvbgone12_v4.c **** 	    if (grenade) {
 673               		.loc 1 190 0 is_stmt 1
 674 00f8 8091 0000 		lds r24,grenade
 675 00fc 8111      		cpse r24,__zero_reg__
 676 00fe 00C0      		rjmp .L35
 677               	.LVL62:
 678               	.L37:
 133:minitvbgone12_v4.c **** 	for(loopgrn=0;loopgrn<grenade+1;loopgrn++) {
 679               		.loc 1 133 0
 680 0100 F394      		inc r15
 681               	.LVL63:
 682 0102 00C0      		rjmp .L27
 683               	.LVL64:
 684               	.L35:
 191:minitvbgone12_v4.c **** 			PORTB = 0b00000110;	// Pullup
 685               		.loc 1 191 0
 686 0104 B8BA      		out 0x18,r11
 687               	.LVL65:
 688 0106 CCE2      		ldi r28,lo8(44)
 689               	.LVL66:
 690               	.L36:
 193:minitvbgone12_v4.c **** 			  delay_ten_us(65500); // 29s
 691               		.loc 1 193 0 discriminator 2
 692 0108 8CED      		ldi r24,lo8(-36)
 693 010a 9FEF      		ldi r25,lo8(-1)
 694 010c 00D0      		rcall delay_ten_us
 695               	.LVL67:
 194:minitvbgone12_v4.c **** 			  wdt_reset();
 696               		.loc 1 194 0 discriminator 2
 697               	/* #APP */
 698               	 ;  194 "minitvbgone12_v4.c" 1
 699 010e A895      		wdr
 700               	 ;  0 "" 2
 701               	/* #NOAPP */
 702 0110 C150      		subi r28,lo8(-(-1))
 192:minitvbgone12_v4.c **** 			for (i=0;i<44;i++) {
 703               		.loc 1 192 0 discriminator 2
 704 0112 01F4      		brne .L36
 705 0114 00C0      		rjmp .L37
 706               	.LVL68:
 707               	.L27:
 133:minitvbgone12_v4.c **** 	for(loopgrn=0;loopgrn<grenade+1;loopgrn++) {
 708               		.loc 1 133 0 discriminator 1
 709 0116 4091 0000 		lds r20,grenade
 710 011a 242F      		mov r18,r20
 711 011c 30E0      		ldi r19,0
 712 011e 8F2D      		mov r24,r15
 713 0120 90E0      		ldi r25,0
 714 0122 2817      		cp r18,r24
 715 0124 3907      		cpc r19,r25
 716 0126 04F0      		brlt .+2
 717 0128 00C0      		rjmp .L38
 200:minitvbgone12_v4.c **** 	  wdt_disable();
 718               		.loc 1 200 0
 719 012a C8E1      		ldi r28,lo8(24)
 720               	/* #APP */
 721               	 ;  200 "minitvbgone12_v4.c" 1
 722 012c 0FB6      		in __tmp_reg__, __SREG__
 723 012e F894      		cli
 724 0130 C1BD      		out 33, r28
 725 0132 11BC      		out 33, __zero_reg__
 726 0134 0FBE      		out __SREG__,__tmp_reg__
 727               		
 728               	 ;  0 "" 2
 203:minitvbgone12_v4.c **** 	  quickflashLEDx(10);
 729               		.loc 1 203 0
 730               	/* #NOAPP */
 731 0136 8AE0      		ldi r24,lo8(10)
 732 0138 00D0      		rcall quickflashLEDx
 733               	.LVL69:
 206:minitvbgone12_v4.c **** 	  TCCR0A = 0;           // turn off frequency generator (should be off already)
 734               		.loc 1 206 0
 735 013a 1ABC      		out 0x2a,__zero_reg__
 208:minitvbgone12_v4.c **** 	  PORTB = 0b00000100;	// Pullup
 736               		.loc 1 208 0
 737 013c 84E0      		ldi r24,lo8(4)
 738 013e 88BB      		out 0x18,r24
 210:minitvbgone12_v4.c **** 	  wdt_disable();           // turn off the watchdog (since we want to sleep
 739               		.loc 1 210 0
 740               	/* #APP */
 741               	 ;  210 "minitvbgone12_v4.c" 1
 742 0140 0FB6      		in __tmp_reg__, __SREG__
 743 0142 F894      		cli
 744 0144 C1BD      		out 33, r28
 745 0146 11BC      		out 33, __zero_reg__
 746 0148 0FBE      		out __SREG__,__tmp_reg__
 747               		
 748               	 ;  0 "" 2
 213:minitvbgone12_v4.c **** 	  GIMSK = _BV(INT0);
 749               		.loc 1 213 0
 750               	/* #NOAPP */
 751 014a 80E4      		ldi r24,lo8(64)
 752 014c 8BBF      		out 0x3b,r24
 214:minitvbgone12_v4.c **** 	  MCUCR = _BV(SM1) |  _BV(SE);    // power down mode,  SE enables Sleep Modes
 753               		.loc 1 214 0
 754 014e 80E3      		ldi r24,lo8(48)
 755 0150 85BF      		out 0x35,r24
 215:minitvbgone12_v4.c **** 	  sleep_cpu();                    // put CPU into Power Down Sleep Mode
 756               		.loc 1 215 0
 757               	/* #APP */
 758               	 ;  215 "minitvbgone12_v4.c" 1
 759 0152 8895      		sleep
 760               		
 761               	 ;  0 "" 2
 218:minitvbgone12_v4.c ****   	  wdt_enable(WDTO_15MS); // 1 second long timeout
 762               		.loc 1 218 0
 763               	/* #NOAPP */
 764 0154 28E0      		ldi r18,lo8(8)
 765 0156 88E1      		ldi r24,lo8(24)
 766 0158 90E0      		ldi r25,0
 767               	/* #APP */
 768               	 ;  218 "minitvbgone12_v4.c" 1
 769 015a 0FB6      		in __tmp_reg__,__SREG__
 770 015c F894      		cli
 771 015e A895      		wdr
 772 0160 81BD      		out 33,r24
 773 0162 0FBE      		out __SREG__,__tmp_reg__
 774 0164 21BD      		out 33,r18
 775               	 ;  0 "" 2
 776               	/* #NOAPP */
 777               	.L39:
 778 0166 00C0      		rjmp .L39
 779               		.cfi_endproc
 780               	.LFE5:
 782               		.comm	code_ptr,2,1
 783               	.global	grenade
 784               		.section .bss
 787               	grenade:
 788 0000 00        		.zero	1
 789               	.global	bits_r
 792               	bits_r:
 793 0001 00        		.zero	1
 794               	.global	bitsleft_r
 797               	bitsleft_r:
 798 0002 00        		.zero	1
 799               		.text
 800               	.Letext0:
 801               		.file 2 "/usr/local/Cellar/avr-gcc/4.7.2/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 minitvbgone12_v4.c
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:4      *ABS*:000000000000003f __SREG__
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:12     .text:0000000000000000 read_bits
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:797    .bss:0000000000000002 bitsleft_r
                            *COM*:0000000000000002 code_ptr
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:792    .bss:0000000000000001 bits_r
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:128    .text:000000000000007c __vector_1
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:168    .text:000000000000009a delay_ten_us
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:217    .text:00000000000000b0 xmitCodeElement
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:277    .text:00000000000000da quickflashLEDx
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:329    .text:00000000000000fc setgrenade
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:787    .bss:0000000000000000 grenade
/var/folders/2d/rsx1txcs3yd4894lgmv0wc5h0000gn/T//cc2J59a7.s:385    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
num_EUcodes
EUpowerCodes
__do_clear_bss
